{
  "version": 3,
  "sources": ["../frappe-charts/node_modules/style-inject/dist/style-inject.es.js", "../frappe-charts/src/js/utils/dom.js", "../frappe-charts/src/js/utils/constants.js", "../frappe-charts/src/js/utils/helpers.js", "../frappe-charts/src/js/utils/draw-utils.js", "../frappe-charts/src/js/utils/colors.js", "../frappe-charts/src/js/utils/draw.js", "../frappe-charts/src/js/utils/animate.js", "../frappe-charts/src/js/utils/animation.js", "../frappe-charts/src/js/utils/export.js", "../frappe-charts/src/js/utils/date-utils.js", "../frappe-charts/src/js/objects/ChartComponents.js", "../frappe-charts/src/js/utils/intervals.js", "../frappe-charts/src/js/utils/axis-chart-utils.js", "../frappe-charts/src/js/chart.js", "../frappe-charts/src/js/objects/SvgTip.js", "../frappe-charts/src/css/chartsCss.js", "../frappe-charts/src/js/charts/BaseChart.js", "../frappe-charts/src/js/charts/AggregationChart.js", "../frappe-charts/src/js/charts/PercentageChart.js", "../frappe-charts/src/js/charts/PieChart.js", "../frappe-charts/src/js/charts/Heatmap.js", "../frappe-charts/src/js/charts/AxisChart.js", "../frappe-charts/src/js/charts/DonutChart.js"],
  "sourcesContent": ["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n", "export function $(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\nexport function findNodeIndex(node)\n{\n\tvar i = 0;\n\twhile (node.previousSibling) {\n\t\tnode = node.previousSibling;\n\t\ti++;\n\t}\n\treturn i;\n}\n\n$.create = (tag, o) => {\n\tvar element = document.createElement(tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\n\t\t} else if (i === \"styles\") {\n\t\t\tif(typeof val === \"object\") {\n\t\t\t\tObject.keys(val).map(prop => {\n\t\t\t\t\telement.style[prop] = val[prop];\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (i in element ) {\n\t\t\telement[i] = val;\n\t\t}\n\t\telse {\n\t\t\telement.setAttribute(i, val);\n\t\t}\n\t}\n\n\treturn element;\n};\n\nexport function getOffset(element) {\n\tlet rect = element.getBoundingClientRect();\n\treturn {\n\t\t// https://stackoverflow.com/a/7436602/6495043\n\t\t// rect.top varies with scroll, so we add whatever has been\n\t\t// scrolled to it to get absolute distance from actual page top\n\t\ttop: rect.top + (document.documentElement.scrollTop || document.body.scrollTop),\n\t\tleft: rect.left + (document.documentElement.scrollLeft || document.body.scrollLeft)\n\t};\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n// an element's offsetParent property will return null whenever it, or any of its parents,\n// is hidden via the display style property.\nexport function isHidden(el) {\n\treturn (el.offsetParent === null);\n}\n\nexport function isElementInViewport(el) {\n\t// Although straightforward: https://stackoverflow.com/a/7557433/6495043\n\tvar rect = el.getBoundingClientRect();\n\n\treturn (\n\t\trect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */\n\t);\n}\n\nexport function getElementContentWidth(element) {\n\tvar styles = window.getComputedStyle(element);\n\tvar padding = parseFloat(styles.paddingLeft) +\n\t\tparseFloat(styles.paddingRight);\n\n\treturn element.clientWidth - padding;\n}\n\nexport function bind(element, o){\n\tif (element) {\n\t\tfor (var event in o) {\n\t\t\tvar callback = o[event];\n\n\t\t\tevent.split(/\\s+/).forEach(function (event) {\n\t\t\t\telement.addEventListener(event, callback);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function unbind(element, o){\n\tif (element) {\n\t\tfor (var event in o) {\n\t\t\tvar callback = o[event];\n\n\t\t\tevent.split(/\\s+/).forEach(function(event) {\n\t\t\t\telement.removeEventListener(event, callback);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function fire(target, type, properties) {\n\tvar evt = document.createEvent(\"HTMLEvents\");\n\n\tevt.initEvent(type, true, true );\n\n\tfor (var j in properties) {\n\t\tevt[j] = properties[j];\n\t}\n\n\treturn target.dispatchEvent(evt);\n}\n\n// https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/\nexport function forEachNode(nodeList, callback, scope) {\n\tif(!nodeList) return;\n\tfor (var i = 0; i < nodeList.length; i++) {\n\t\tcallback.call(scope, nodeList[i], i);\n\t}\n}\n\nexport function activate($parent, $child, commonClass, activeClass='active', index = -1) {\n\tlet $children = $parent.querySelectorAll(`.${commonClass}.${activeClass}`);\n\n\tforEachNode($children, (node, i) => {\n\t\tif(index >= 0 && i <= index) return;\n\t\tnode.classList.remove(activeClass);\n\t});\n\n\t$child.classList.add(activeClass);\n}\n", "export const ALL_CHART_TYPES = ['line', 'scatter', 'bar', 'percentage', 'heatmap', 'pie'];\n\nexport const COMPATIBLE_CHARTS = {\n\tbar: ['line', 'scatter', 'percentage', 'pie'],\n\tline: ['scatter', 'bar', 'percentage', 'pie'],\n\tpie: ['line', 'scatter', 'percentage', 'bar'],\n\tpercentage: ['bar', 'line', 'scatter', 'pie'],\n\theatmap: []\n};\n\nexport const DATA_COLOR_DIVISIONS = {\n\tbar: 'datasets',\n\tline: 'datasets',\n\tpie: 'labels',\n\tpercentage: 'labels',\n\theatmap: HEATMAP_DISTRIBUTION_SIZE\n};\n\nexport const BASE_MEASURES = {\n\tmargins: {\n\t\ttop: 10,\n\t\tbottom: 10,\n\t\tleft: 20,\n\t\tright: 20\n\t},\n\tpaddings: {\n\t\ttop: 20,\n\t\tbottom: 40,\n\t\tleft: 30,\n\t\tright: 10\n\t},\n\n\tbaseHeight: 240,\n\ttitleHeight: 20,\n\tlegendHeight: 30,\n\n\ttitleFontSize: 12,\n};\n\nexport function getTopOffset(m) {\n\treturn m.titleHeight + m.margins.top + m.paddings.top;\n}\n\nexport function getLeftOffset(m) {\n\treturn m.margins.left + m.paddings.left;\n}\n\nexport function getExtraHeight(m) {\n\tlet totalExtraHeight = m.margins.top + m.margins.bottom\n\t\t+ m.paddings.top + m.paddings.bottom\n\t\t+ m.titleHeight + m.legendHeight;\n\treturn totalExtraHeight;\n}\n\nexport function getExtraWidth(m) {\n\tlet totalExtraWidth = m.margins.left + m.margins.right\n\t\t+ m.paddings.left + m.paddings.right;\n\n\treturn totalExtraWidth;\n}\n\nexport const INIT_CHART_UPDATE_TIMEOUT = 700;\nexport const CHART_POST_ANIMATE_TIMEOUT = 400;\n\nexport const DEFAULT_AXIS_CHART_TYPE = 'line';\nexport const AXIS_DATASET_CHART_TYPES = ['line', 'bar'];\n\nexport const AXIS_LEGEND_BAR_SIZE = 100;\n\nexport const BAR_CHART_SPACE_RATIO = 0.5;\nexport const MIN_BAR_PERCENT_HEIGHT = 0.00;\n\nexport const LINE_CHART_DOT_SIZE = 4;\nexport const DOT_OVERLAY_SIZE_INCR = 4;\n\nexport const PERCENTAGE_BAR_DEFAULT_HEIGHT = 20;\nexport const PERCENTAGE_BAR_DEFAULT_DEPTH = 2;\n\n// Fixed 5-color theme,\n// More colors are difficult to parse visually\nexport const HEATMAP_DISTRIBUTION_SIZE = 5;\n\nexport const HEATMAP_SQUARE_SIZE = 10;\nexport const HEATMAP_GUTTER_SIZE = 2;\n\nexport const DEFAULT_CHAR_WIDTH = 7;\n\nexport const TOOLTIP_POINTER_TRIANGLE_HEIGHT = 5;\n\nconst DEFAULT_CHART_COLORS = ['light-blue', 'blue', 'violet', 'red', 'orange',\n\t'yellow', 'green', 'light-green', 'purple', 'magenta', 'light-grey', 'dark-grey'];\nconst HEATMAP_COLORS_GREEN = ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127'];\nexport const HEATMAP_COLORS_BLUE = ['#ebedf0', '#c0ddf9', '#73b3f3', '#3886e1', '#17459e'];\nexport const HEATMAP_COLORS_YELLOW = ['#ebedf0', '#fdf436', '#ffc700', '#ff9100', '#06001c'];\n\nexport const DEFAULT_COLORS = {\n\tbar: DEFAULT_CHART_COLORS,\n\tline: DEFAULT_CHART_COLORS,\n\tpie: DEFAULT_CHART_COLORS,\n\tpercentage: DEFAULT_CHART_COLORS,\n\theatmap: HEATMAP_COLORS_GREEN,\n\tdonut: DEFAULT_CHART_COLORS\n};\n\n// Universal constants\nexport const ANGLE_RATIO = Math.PI / 180;\nexport const FULL_ANGLE = 360;\n", "import { ANGLE_RATIO } from './constants';\n\n/**\n * Returns the value of a number upto 2 decimal places.\n * @param {Number} d Any number\n */\nexport function floatTwo(d) {\n\treturn parseFloat(d.toFixed(2));\n}\n\n/**\n * Returns whether or not two given arrays are equal.\n * @param {Array} arr1 First array\n * @param {Array} arr2 Second array\n */\nexport function arraysEqual(arr1, arr2) {\n\tif(arr1.length !== arr2.length) return false;\n\tlet areEqual = true;\n\tarr1.map((d, i) => {\n\t\tif(arr2[i] !== d) areEqual = false;\n\t});\n\treturn areEqual;\n}\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} array An array containing the items.\n */\nexport function shuffle(array) {\n\t// Awesomeness: https://bost.ocks.org/mike/shuffle/\n\t// https://stackoverflow.com/a/2450976/6495043\n\t// https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array?noredirect=1&lq=1\n\n\tfor (let i = array.length - 1; i > 0; i--) {\n\t\tlet j = Math.floor(Math.random() * (i + 1));\n\t\t[array[i], array[j]] = [array[j], array[i]];\n\t}\n\n\treturn array;\n}\n\n/**\n * Fill an array with extra points\n * @param {Array} array Array\n * @param {Number} count number of filler elements\n * @param {Object} element element to fill with\n * @param {Boolean} start fill at start?\n */\nexport function fillArray(array, count, element, start=false) {\n\tif(!element) {\n\t\telement = start ? array[0] : array[array.length - 1];\n\t}\n\tlet fillerArray = new Array(Math.abs(count)).fill(element);\n\tarray = start ? fillerArray.concat(array) : array.concat(fillerArray);\n\treturn array;\n}\n\n/**\n * Returns pixel width of string.\n * @param {String} string\n * @param {Number} charWidth Width of single char in pixels\n */\nexport function getStringWidth(string, charWidth) {\n\treturn (string+\"\").length * charWidth;\n}\n\nexport function bindChange(obj, getFn, setFn) {\n\treturn new Proxy(obj, {\n\t\tset: function(target, prop, value) {\n\t\t\tsetFn();\n\t\t\treturn Reflect.set(target, prop, value);\n\t\t},\n\t\tget: function(target, prop) {\n\t\t\tgetFn();\n\t\t\treturn Reflect.get(target, prop);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/29325222\nexport function getRandomBias(min, max, bias, influence) {\n\tconst range = max - min;\n\tconst biasValue = range * bias + min;\n\tvar rnd = Math.random() * range + min,\t\t// random in range\n\t\tmix = Math.random() * influence;\t\t// random mixer\n\treturn rnd * (1 - mix) + biasValue * mix;\t// mix full range and bias\n}\n\nexport function getPositionByAngle(angle, radius) {\n\treturn {\n\t\tx: Math.sin(angle * ANGLE_RATIO) * radius,\n\t\ty: Math.cos(angle * ANGLE_RATIO) * radius,\n\t};\n}\n\n/**\n * Check if a number is valid for svg attributes\n * @param {object} candidate Candidate to test\n * @param {Boolean} nonNegative flag to treat negative number as invalid\n */\nexport function isValidNumber(candidate, nonNegative=false) {\n\tif (Number.isNaN(candidate)) return false;\n\telse if (candidate === undefined) return false;\n\telse if (!Number.isFinite(candidate)) return false;\n\telse if (nonNegative && candidate < 0) return false;\n\telse return true;\n}\n\n/**\n * Round a number to the closes precision, max max precision 4\n * @param {Number} d Any Number\n */\nexport function round(d) {\n\t// https://floating-point-gui.de/\n\t// https://www.jacklmoore.com/notes/rounding-in-javascript/\n\treturn Number(Math.round(d + 'e4') + 'e-4');\n}\n\n/**\n * Creates a deep clone of an object\n * @param {Object} candidate Any Object\n */\n export function deepClone(candidate) {\n\tlet cloned, value, key;\n  \n\tif (candidate instanceof Date) {\n\t  return new Date(candidate.getTime());\n\t}\n  \n\tif (typeof candidate !== \"object\" || candidate === null) {\n\t  return candidate;\n\t}\n  \n\tcloned = Array.isArray(candidate) ? [] : {};\n  \n\tfor (key in candidate) {\n\t  value = candidate[key];\n  \n\t  cloned[key] = deepClone(value);\n\t}\n  \n\treturn cloned;\n  }", "import { fillArray } from './helpers';\n\nexport function getBarHeightAndYAttr(yTop, zeroLine) {\n\tlet height, y;\n\tif (yTop <= zeroLine) {\n\t\theight = zeroLine - yTop;\n\t\ty = yTop;\n\t} else {\n\t\theight = yTop - zeroLine;\n\t\ty = zeroLine;\n\t}\n\n\treturn [height, y];\n}\n\nexport function equilizeNoOfElements(array1, array2,\n\textraCount = array2.length - array1.length) {\n\n\t// Doesn't work if either has zero elements.\n\tif(extraCount > 0) {\n\t\tarray1 = fillArray(array1, extraCount);\n\t} else {\n\t\tarray2 = fillArray(array2, extraCount);\n\t}\n\treturn [array1, array2];\n}\n\nexport function truncateString(txt, len) {\n\tif (!txt) {\n\t\treturn;\n\t}\n\tif (txt.length > len) {\n\t\treturn txt.slice(0, len-3) + '...';\n\t} else {\n\t\treturn txt;\n\t}\n}\n\nexport function shortenLargeNumber(label) {\n\tlet number;\n\tif (typeof label === 'number') number = label;\n\telse if (typeof label === 'string') {\n\t\tnumber = Number(label);\n\t\tif (Number.isNaN(number)) return label;\n\t}\n\n\t// Using absolute since log wont work for negative numbers\n\tlet p = Math.floor(Math.log10(Math.abs(number)));\n\tif (p <= 2) return number; // Return as is for a 3 digit number of less\n\tlet\tl = Math.floor(p / 3);\n\tlet shortened = (Math.pow(10, p - l * 3) * +(number / Math.pow(10, p)).toFixed(1));\n\n\t// Correct for floating point error upto 2 decimal places\n\treturn Math.round(shortened*100)/100 + ' ' + ['', 'K', 'M', 'B', 'T'][l];\n}\n\n// cubic bezier curve calculation (from example by Fran\u00E7ois Romain)\nexport function getSplineCurvePointsStr(xList, yList) {\n\n\tlet points=[];\n\tfor(let i=0;i<xList.length;i++){\n\t\tpoints.push([xList[i], yList[i]]);\n\t}\n\n\tlet smoothing = 0.2;\n\tlet line = (pointA, pointB) => {\n\t\tlet lengthX = pointB[0] - pointA[0];\n\t\tlet lengthY = pointB[1] - pointA[1];\n\t\treturn {\n\t\t\tlength: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n\t\t\tangle: Math.atan2(lengthY, lengthX)\n\t\t};\n\t};\n    \n\tlet controlPoint = (current, previous, next, reverse) => {\n\t\tlet p = previous || current;\n\t\tlet n = next || current;\n\t\tlet o = line(p, n);\n\t\tlet angle = o.angle + (reverse ? Math.PI : 0);\n\t\tlet length = o.length * smoothing;\n\t\tlet x = current[0] + Math.cos(angle) * length;\n\t\tlet y = current[1] + Math.sin(angle) * length;\n\t\treturn [x, y];\n\t};\n    \n\tlet bezierCommand = (point, i, a) => {\n\t\tlet cps = controlPoint(a[i - 1], a[i - 2], point);\n\t\tlet cpe = controlPoint(point, a[i - 1], a[i + 1], true);\n\t\treturn `C ${cps[0]},${cps[1]} ${cpe[0]},${cpe[1]} ${point[0]},${point[1]}`;\n\t};\n    \n\tlet pointStr = (points, command) => {\n\t\treturn points.reduce((acc, point, i, a) => i === 0\n\t\t\t? `${point[0]},${point[1]}`\n\t\t\t: `${acc} ${command(point, i, a)}`, '');\n\t};\n    \n\treturn pointStr(points, bezierCommand);\n}\n", "const PRESET_COLOR_MAP = {\n\t'light-blue': '#7cd6fd',\n\t'blue': '#5e64ff',\n\t'violet': '#743ee2',\n\t'red': '#ff5858',\n\t'orange': '#ffa00a',\n\t'yellow': '#feef72',\n\t'green': '#28a745',\n\t'light-green': '#98d85b',\n\t'purple': '#b554ff',\n\t'magenta': '#ffa3ef',\n\t'black': '#36114C',\n\t'grey': '#bdd3e6',\n\t'light-grey': '#f0f4f7',\n\t'dark-grey': '#b8c2cc'\n};\n\nfunction limitColor(r){\n\tif (r > 255) return 255;\n\telse if (r < 0) return 0;\n\treturn r;\n}\n\nexport function lightenDarkenColor(color, amt) {\n\tlet col = getColor(color);\n\tlet usePound = false;\n\tif (col[0] == \"#\") {\n\t\tcol = col.slice(1);\n\t\tusePound = true;\n\t}\n\tlet num = parseInt(col,16);\n\tlet r = limitColor((num >> 16) + amt);\n\tlet b = limitColor(((num >> 8) & 0x00FF) + amt);\n\tlet g = limitColor((num & 0x0000FF) + amt);\n\treturn (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nexport function isValidColor(string) {\n\t// https://stackoverflow.com/a/32685393\n\tlet HEX_RE = /(^\\s*)(#)((?:[A-Fa-f0-9]{3}){1,2})$/i;\n\tlet RGB_RE = /(^\\s*)(rgb|hsl)(a?)[(]\\s*([\\d.]+\\s*%?)\\s*,\\s*([\\d.]+\\s*%?)\\s*,\\s*([\\d.]+\\s*%?)\\s*(?:,\\s*([\\d.]+)\\s*)?[)]$/i;\n\treturn HEX_RE.test(string) || RGB_RE.test(string);\n}\n\nexport const getColor = (color) => {\n\t// When RGB color, convert to hexadecimal (alpha value is omitted)\n\tif((/rgb[a]{0,1}\\([\\d, ]+\\)/gim).test(color)) {\n\t\treturn (/\\D+(\\d*)\\D+(\\d*)\\D+(\\d*)/gim).exec(color)\n\t\t\t.map((x, i) => (i !== 0 ? Number(x).toString(16) : '#'))\n\t\t\t.reduce((c, ch) => `${c}${ch}`);\n\t}\n\treturn PRESET_COLOR_MAP[color] || color;\n};\n", "import { getBarHeightAndYAttr, truncateString, shortenLargeNumber, getSplineCurvePointsStr } from './draw-utils';\nimport { getStringWidth, isValidNumber } from './helpers';\nimport { DOT_OVERLAY_SIZE_INCR, PERCENTAGE_BAR_DEFAULT_DEPTH } from './constants';\nimport { lightenDarkenColor } from './colors';\n\nexport const AXIS_TICK_LENGTH = 6;\nconst LABEL_MARGIN = 4;\nconst LABEL_MAX_CHARS = 15;\nexport const FONT_SIZE = 10;\nconst BASE_LINE_COLOR = '#dadada';\nconst FONT_FILL = '#555b51';\n\nfunction $(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\nexport function createSVG(tag, o) {\n\tvar element = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\n\t\t} else if (i === \"styles\") {\n\t\t\tif(typeof val === \"object\") {\n\t\t\t\tObject.keys(val).map(prop => {\n\t\t\t\t\telement.style[prop] = val[prop];\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif(i === \"className\") { i = \"class\"; }\n\t\t\tif(i === \"innerHTML\") {\n\t\t\t\telement['textContent'] = val;\n\t\t\t} else {\n\t\t\t\telement.setAttribute(i, val);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction renderVerticalGradient(svgDefElem, gradientId) {\n\treturn createSVG('linearGradient', {\n\t\tinside: svgDefElem,\n\t\tid: gradientId,\n\t\tx1: 0,\n\t\tx2: 0,\n\t\ty1: 0,\n\t\ty2: 1\n\t});\n}\n\nfunction setGradientStop(gradElem, offset, color, opacity) {\n\treturn createSVG('stop', {\n\t\t'inside': gradElem,\n\t\t'style': `stop-color: ${color}`,\n\t\t'offset': offset,\n\t\t'stop-opacity': opacity\n\t});\n}\n\nexport function makeSVGContainer(parent, className, width, height) {\n\treturn createSVG('svg', {\n\t\tclassName: className,\n\t\tinside: parent,\n\t\twidth: width,\n\t\theight: height\n\t});\n}\n\nexport function makeSVGDefs(svgContainer) {\n\treturn createSVG('defs', {\n\t\tinside: svgContainer,\n\t});\n}\n\nexport function makeSVGGroup(className, transform='', parent=undefined) {\n\tlet args = {\n\t\tclassName: className,\n\t\ttransform: transform\n\t};\n\tif(parent) args.inside = parent;\n\treturn createSVG('g', args);\n}\n\nexport function wrapInSVGGroup(elements, className='') {\n\tlet g = createSVG('g', {\n\t\tclassName: className\n\t});\n\telements.forEach(e => g.appendChild(e));\n\treturn g;\n}\n\nexport function makePath(pathStr, className='', stroke='none', fill='none', strokeWidth=2) {\n\treturn createSVG('path', {\n\t\tclassName: className,\n\t\td: pathStr,\n\t\tstyles: {\n\t\t\tstroke: stroke,\n\t\t\tfill: fill,\n\t\t\t'stroke-width': strokeWidth\n\t\t}\n\t});\n}\n\nexport function makeArcPathStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, arcEndY] = [center.x + endPosition.x, center.y + endPosition.y];\n\treturn `M${center.x} ${center.y}\n\t\tL${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY} z`;\n}\n\nexport function makeCircleStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, midArc, arcEndY] = [center.x + endPosition.x, center.y * 2, center.y + endPosition.y];\n\treturn `M${center.x} ${center.y}\n\t\tL${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${midArc} z\n\t\tL${arcStartX} ${midArc}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY} z`;\n}\n\nexport function makeArcStrokePathStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, arcEndY] = [center.x + endPosition.x, center.y + endPosition.y];\n\n\treturn `M${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY}`;\n}\n\nexport function makeStrokeCircleStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, midArc, arcEndY] = [center.x + endPosition.x, radius * 2 + arcStartY, center.y + startPosition.y];\n\n\treturn `M${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${midArc}\n\t\tM${arcStartX} ${midArc}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY}`;\n}\n\nexport function makeGradient(svgDefElem, color, lighter = false) {\n\tlet gradientId ='path-fill-gradient' + '-' + color + '-' +(lighter ? 'lighter' : 'default');\n\tlet gradientDef = renderVerticalGradient(svgDefElem, gradientId);\n\tlet opacities = [1, 0.6, 0.2];\n\tif(lighter) {\n\t\topacities = [0.4, 0.2, 0];\n\t}\n\n\tsetGradientStop(gradientDef, \"0%\", color, opacities[0]);\n\tsetGradientStop(gradientDef, \"50%\", color, opacities[1]);\n\tsetGradientStop(gradientDef, \"100%\", color, opacities[2]);\n\n\treturn gradientId;\n}\n\nexport function percentageBar(x, y, width, height,\n\tdepth=PERCENTAGE_BAR_DEFAULT_DEPTH, fill='none') {\n\n\tlet args = {\n\t\tclassName: 'percentage-bar',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tfill: fill,\n\t\tstyles: {\n\t\t\t'stroke': lightenDarkenColor(fill, -25),\n\t\t\t// Diabolically good: https://stackoverflow.com/a/9000859\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n\t\t\t'stroke-dasharray': `0, ${height + width}, ${width}, ${height}`,\n\t\t\t'stroke-width': depth\n\t\t},\n\t};\n\n\treturn createSVG(\"rect\", args);\n}\n\nexport function heatSquare(className, x, y, size, radius, fill='none', data={}) {\n\tlet args = {\n\t\tclassName: className,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: size,\n\t\theight: size,\n\t\trx: radius,\n\t\tfill: fill\n\t};\n\n\tObject.keys(data).map(key => {\n\t\targs[key] = data[key];\n\t});\n\n\treturn createSVG(\"rect\", args);\n}\n\nexport function legendBar(x, y, size, fill='none', label, truncate=false) {\n\tlabel = truncate ? truncateString(label, LABEL_MAX_CHARS) : label;\n\n\tlet args = {\n\t\tclassName: 'legend-bar',\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: size,\n\t\theight: '2px',\n\t\tfill: fill\n\t};\n\tlet text = createSVG('text', {\n\t\tclassName: 'legend-dataset-text',\n\t\tx: 0,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE * 2) + 'px',\n\t\t'font-size': (FONT_SIZE * 1.2) + 'px',\n\t\t'text-anchor': 'start',\n\t\tfill: FONT_FILL,\n\t\tinnerHTML: label\n\t});\n\n\tlet group = createSVG('g', {\n\t\ttransform: `translate(${x}, ${y})`\n\t});\n\tgroup.appendChild(createSVG(\"rect\", args));\n\tgroup.appendChild(text);\n\n\treturn group;\n}\n\nexport function legendDot(x, y, size, fill='none', label, truncate=false) {\n\tlabel = truncate ? truncateString(label, LABEL_MAX_CHARS) : label;\n\n\tlet args = {\n\t\tclassName: 'legend-dot',\n\t\tcx: 0,\n\t\tcy: 0,\n\t\tr: size,\n\t\tfill: fill\n\t};\n\tlet text = createSVG('text', {\n\t\tclassName: 'legend-dataset-text',\n\t\tx: 0,\n\t\ty: 0,\n\t\tdx: (FONT_SIZE) + 'px',\n\t\tdy: (FONT_SIZE/3) + 'px',\n\t\t'font-size': (FONT_SIZE * 1.2) + 'px',\n\t\t'text-anchor': 'start',\n\t\tfill: FONT_FILL,\n\t\tinnerHTML: label\n\t});\n\n\tlet group = createSVG('g', {\n\t\ttransform: `translate(${x}, ${y})`\n\t});\n\tgroup.appendChild(createSVG(\"circle\", args));\n\tgroup.appendChild(text);\n\n\treturn group;\n}\n\nexport function makeText(className, x, y, content, options = {}) {\n\tlet fontSize = options.fontSize || FONT_SIZE;\n\tlet dy = options.dy !== undefined ? options.dy : (fontSize / 2);\n\tlet fill = options.fill || FONT_FILL;\n\tlet textAnchor = options.textAnchor || 'start';\n\treturn createSVG('text', {\n\t\tclassName: className,\n\t\tx: x,\n\t\ty: y,\n\t\tdy: dy + 'px',\n\t\t'font-size': fontSize + 'px',\n\t\tfill: fill,\n\t\t'text-anchor': textAnchor,\n\t\tinnerHTML: content\n\t});\n}\n\nfunction makeVertLine(x, label, y1, y2, options={}) {\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tlet l = createSVG('line', {\n\t\tclassName: 'line-vertical ' + options.className,\n\t\tx1: 0,\n\t\tx2: 0,\n\t\ty1: y1,\n\t\ty2: y2,\n\t\tstyles: {\n\t\t\tstroke: options.stroke\n\t\t}\n\t});\n\n\tlet text = createSVG('text', {\n\t\tx: 0,\n\t\ty: y1 > y2 ? y1 + LABEL_MARGIN : y1 - LABEL_MARGIN - FONT_SIZE,\n\t\tdy: FONT_SIZE + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'middle',\n\t\tinnerHTML: label + \"\"\n\t});\n\n\tlet line = createSVG('g', {\n\t\ttransform: `translate(${ x }, 0)`\n\t});\n\n\tline.appendChild(l);\n\tline.appendChild(text);\n\n\treturn line;\n}\n\nfunction makeHoriLine(y, label, x1, x2, options={}) {\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.lineType) options.lineType = '';\n\tif (options.shortenNumbers) label = shortenLargeNumber(label);\n\n\tlet className = 'line-horizontal ' + options.className +\n\t\t(options.lineType === \"dashed\" ? \"dashed\": \"\");\n\n\tlet l = createSVG('line', {\n\t\tclassName: className,\n\t\tx1: x1,\n\t\tx2: x2,\n\t\ty1: 0,\n\t\ty2: 0,\n\t\tstyles: {\n\t\t\tstroke: options.stroke\n\t\t}\n\t});\n\n\tlet text = createSVG('text', {\n\t\tx: x1 < x2 ? x1 - LABEL_MARGIN : x1 + LABEL_MARGIN,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / 2 - 2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': x1 < x2 ? 'end' : 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet line = createSVG('g', {\n\t\ttransform: `translate(0, ${y})`,\n\t\t'stroke-opacity': 1\n\t});\n\n\tif(text === 0 || text === '0') {\n\t\tline.style.stroke = \"rgba(27, 31, 35, 0.6)\";\n\t}\n\n\tline.appendChild(l);\n\tline.appendChild(text);\n\n\treturn line;\n}\n\nexport function yLine(y, label, width, options={}) {\n\tif (!isValidNumber(y)) y = 0;\n\n\tif(!options.pos) options.pos = 'left';\n\tif(!options.offset) options.offset = 0;\n\tif(!options.mode) options.mode = 'span';\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.className) options.className = '';\n\n\tlet x1 = -1 * AXIS_TICK_LENGTH;\n\tlet x2 = options.mode === 'span' ? width + AXIS_TICK_LENGTH : 0;\n\n\tif(options.mode === 'tick' && options.pos === 'right') {\n\t\tx1 = width + AXIS_TICK_LENGTH;\n\t\tx2 = width;\n\t}\n\n\t// let offset = options.pos === 'left' ? -1 * options.offset : options.offset;\n\n\tx1 += options.offset;\n\tx2 += options.offset;\n\n\treturn makeHoriLine(y, label, x1, x2, {\n\t\tstroke: options.stroke,\n\t\tclassName: options.className,\n\t\tlineType: options.lineType,\n\t\tshortenNumbers: options.shortenNumbers\n\t});\n}\n\nexport function xLine(x, label, height, options={}) {\n\tif (!isValidNumber(x)) x = 0;\n\n\tif(!options.pos) options.pos = 'bottom';\n\tif(!options.offset) options.offset = 0;\n\tif(!options.mode) options.mode = 'span';\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.className) options.className = '';\n\n\t// Draw X axis line in span/tick mode with optional label\n\t//                        \ty2(span)\n\t// \t\t\t\t\t\t|\n\t// \t\t\t\t\t\t|\n\t//\t\t\t\tx line\t|\n\t//\t\t\t\t\t\t|\n\t// \t\t\t\t\t   \t|\n\t// ---------------------+-- y2(tick)\n\t//\t\t\t\t\t\t|\n\t//\t\t\t\t\t\t\ty1\n\n\tlet y1 = height + AXIS_TICK_LENGTH;\n\tlet y2 = options.mode === 'span' ? -1 * AXIS_TICK_LENGTH : height;\n\n\tif(options.mode === 'tick' && options.pos === 'top') {\n\t\t// top axis ticks\n\t\ty1 = -1 * AXIS_TICK_LENGTH;\n\t\ty2 = 0;\n\t}\n\n\treturn makeVertLine(x, label, y1, y2, {\n\t\tstroke: options.stroke,\n\t\tclassName: options.className,\n\t\tlineType: options.lineType\n\t});\n}\n\nexport function yMarker(y, label, width, options={}) {\n\tif(!options.labelPos) options.labelPos = 'right';\n\tlet x = options.labelPos === 'left' ? LABEL_MARGIN\n\t\t: width - getStringWidth(label, 5) - LABEL_MARGIN;\n\n\tlet labelSvg = createSVG('text', {\n\t\tclassName: 'chart-label',\n\t\tx: x,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / -2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet line = makeHoriLine(y, '', 0, width, {\n\t\tstroke: options.stroke || BASE_LINE_COLOR,\n\t\tclassName: options.className || '',\n\t\tlineType: options.lineType\n\t});\n\n\tline.appendChild(labelSvg);\n\n\treturn line;\n}\n\nexport function yRegion(y1, y2, width, label, options={}) {\n\t// return a group\n\tlet height = y1 - y2;\n\n\tlet rect = createSVG('rect', {\n\t\tclassName: `bar mini`, // remove class\n\t\tstyles: {\n\t\t\tfill: `rgba(228, 234, 239, 0.49)`,\n\t\t\tstroke: BASE_LINE_COLOR,\n\t\t\t'stroke-dasharray': `${width}, ${height}`\n\t\t},\n\t\t// 'data-point-index': index,\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: width,\n\t\theight: height\n\t});\n\n\tif(!options.labelPos) options.labelPos = 'right';\n\tlet x = options.labelPos === 'left' ? LABEL_MARGIN\n\t\t: width - getStringWidth(label+\"\", 4.5) - LABEL_MARGIN;\n\n\tlet labelSvg = createSVG('text', {\n\t\tclassName: 'chart-label',\n\t\tx: x,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / -2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet region = createSVG('g', {\n\t\ttransform: `translate(0, ${y2})`\n\t});\n\n\tregion.appendChild(rect);\n\tregion.appendChild(labelSvg);\n\n\treturn region;\n}\n\nexport function datasetBar(x, yTop, width, color, label='', index=0, offset=0, meta={}) {\n\tlet [height, y] = getBarHeightAndYAttr(yTop, meta.zeroLine);\n\ty -= offset;\n\n\tif(height === 0) {\n\t\theight = meta.minHeight;\n\t\ty -= meta.minHeight;\n\t}\n\n\t// Preprocess numbers to avoid svg building errors\n\tif (!isValidNumber(x)) x = 0;\n\tif (!isValidNumber(y)) y = 0;\n\tif (!isValidNumber(height, true)) height = 0;\n\tif (!isValidNumber(width, true)) width = 0;\n\n\tlet rect = createSVG('rect', {\n\t\tclassName: `bar mini`,\n\t\tstyle: `fill: ${color}`,\n\t\t'data-point-index': index,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height\n\t});\n\n\tlabel += \"\";\n\n\tif(!label && !label.length) {\n\t\treturn rect;\n\t} else {\n\t\trect.setAttribute('y', 0);\n\t\trect.setAttribute('x', 0);\n\t\tlet text = createSVG('text', {\n\t\t\tclassName: 'data-point-value',\n\t\t\tx: width/2,\n\t\t\ty: 0,\n\t\t\tdy: (FONT_SIZE / 2 * -1) + 'px',\n\t\t\t'font-size': FONT_SIZE + 'px',\n\t\t\t'text-anchor': 'middle',\n\t\t\tinnerHTML: label\n\t\t});\n\n\t\tlet group = createSVG('g', {\n\t\t\t'data-point-index': index,\n\t\t\ttransform: `translate(${x}, ${y})`\n\t\t});\n\t\tgroup.appendChild(rect);\n\t\tgroup.appendChild(text);\n\n\t\treturn group;\n\t}\n}\n\nexport function datasetDot(x, y, radius, color, label='', index=0) {\n\tlet dot = createSVG('circle', {\n\t\tstyle: `fill: ${color}`,\n\t\t'data-point-index': index,\n\t\tcx: x,\n\t\tcy: y,\n\t\tr: radius\n\t});\n\n\tlabel += \"\";\n\n\tif(!label && !label.length) {\n\t\treturn dot;\n\t} else {\n\t\tdot.setAttribute('cy', 0);\n\t\tdot.setAttribute('cx', 0);\n\n\t\tlet text = createSVG('text', {\n\t\t\tclassName: 'data-point-value',\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tdy: (FONT_SIZE / 2 * -1 - radius) + 'px',\n\t\t\t'font-size': FONT_SIZE + 'px',\n\t\t\t'text-anchor': 'middle',\n\t\t\tinnerHTML: label\n\t\t});\n\n\t\tlet group = createSVG('g', {\n\t\t\t'data-point-index': index,\n\t\t\ttransform: `translate(${x}, ${y})`\n\t\t});\n\t\tgroup.appendChild(dot);\n\t\tgroup.appendChild(text);\n\n\t\treturn group;\n\t}\n}\n\nexport function getPaths(xList, yList, color, options={}, meta={}) {\n\tlet pointsList = yList.map((y, i) => (xList[i] + ',' + y));\n\tlet pointsStr = pointsList.join(\"L\");\n\n\t// Spline\n\tif (options.spline)\n\t\tpointsStr = getSplineCurvePointsStr(xList, yList);\n\n\tlet path = makePath(\"M\"+pointsStr, 'line-graph-path', color);\n\n\t// HeatLine\n\tif(options.heatline) {\n\t\tlet gradient_id = makeGradient(meta.svgDefs, color);\n\t\tpath.style.stroke = `url(#${gradient_id})`;\n\t}\n\n\tlet paths = {\n\t\tpath: path\n\t};\n\n\t// Region\n\tif(options.regionFill) {\n\t\tlet gradient_id_region = makeGradient(meta.svgDefs, color, true);\n\n\t\tlet pathStr = \"M\" + `${xList[0]},${meta.zeroLine}L` + pointsStr + `L${xList.slice(-1)[0]},${meta.zeroLine}`;\n\t\tpaths.region = makePath(pathStr, `region-fill`, 'none', `url(#${gradient_id_region})`);\n\t}\n\n\treturn paths;\n}\n\nexport let makeOverlay = {\n\t'bar': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'rect') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\toverlay.style.fill = '#000000';\n\t\toverlay.style.opacity = '0.4';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t},\n\n\t'dot': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\tlet radius = unit.getAttribute('r');\n\t\tlet fill = unit.getAttribute('fill');\n\t\toverlay.setAttribute('r', parseInt(radius) + DOT_OVERLAY_SIZE_INCR);\n\t\toverlay.setAttribute('fill', fill);\n\t\toverlay.style.opacity = '0.6';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t},\n\n\t'heat_square': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\tlet radius = unit.getAttribute('r');\n\t\tlet fill = unit.getAttribute('fill');\n\t\toverlay.setAttribute('r', parseInt(radius) + DOT_OVERLAY_SIZE_INCR);\n\t\toverlay.setAttribute('fill', fill);\n\t\toverlay.style.opacity = '0.6';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t}\n};\n\nexport let updateOverlay = {\n\t'bar': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'rect') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['x', 'y', 'width', 'height'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n\n\t'dot': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['cx', 'cy'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n\n\t'heat_square': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['cx', 'cy'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n};\n", "import { getBarHeightAndYAttr, getSplineCurvePointsStr } from './draw-utils';\n\nexport const UNIT_ANIM_DUR = 350;\nexport const PATH_ANIM_DUR = 350;\nexport const MARKER_LINE_ANIM_DUR = UNIT_ANIM_DUR;\nexport const REPLACE_ALL_NEW_DUR = 250;\n\nexport const STD_EASING = 'easein';\n\nexport function translate(unit, oldCoord, newCoord, duration) {\n\tlet old = typeof oldCoord === 'string' ? oldCoord : oldCoord.join(', ');\n\treturn [\n\t\tunit,\n\t\t{transform: newCoord.join(', ')},\n\t\tduration,\n\t\tSTD_EASING,\n\t\t\"translate\",\n\t\t{transform: old}\n\t];\n}\n\nexport function translateVertLine(xLine, newX, oldX) {\n\treturn translate(xLine, [oldX, 0], [newX, 0], MARKER_LINE_ANIM_DUR);\n}\n\nexport function translateHoriLine(yLine, newY, oldY) {\n\treturn translate(yLine, [0, oldY], [0, newY], MARKER_LINE_ANIM_DUR);\n}\n\nexport function animateRegion(rectGroup, newY1, newY2, oldY2) {\n\tlet newHeight = newY1 - newY2;\n\tlet rect = rectGroup.childNodes[0];\n\tlet width = rect.getAttribute(\"width\");\n\tlet rectAnim = [\n\t\trect,\n\t\t{ height: newHeight, 'stroke-dasharray': `${width}, ${newHeight}` },\n\t\tMARKER_LINE_ANIM_DUR,\n\t\tSTD_EASING\n\t];\n\n\tlet groupAnim = translate(rectGroup, [0, oldY2], [0, newY2], MARKER_LINE_ANIM_DUR);\n\treturn [rectAnim, groupAnim];\n}\n\nexport function animateBar(bar, x, yTop, width, offset=0, meta={}) {\n\tlet [height, y] = getBarHeightAndYAttr(yTop, meta.zeroLine);\n\ty -= offset;\n\tif(bar.nodeName !== 'rect') {\n\t\tlet rect = bar.childNodes[0];\n\t\tlet rectAnim = [\n\t\t\trect,\n\t\t\t{width: width, height: height},\n\t\t\tUNIT_ANIM_DUR,\n\t\t\tSTD_EASING\n\t\t];\n\n\t\tlet oldCoordStr = bar.getAttribute(\"transform\").split(\"(\")[1].slice(0, -1);\n\t\tlet groupAnim = translate(bar, oldCoordStr, [x, y], MARKER_LINE_ANIM_DUR);\n\t\treturn [rectAnim, groupAnim];\n\t} else {\n\t\treturn [[bar, {width: width, height: height, x: x, y: y}, UNIT_ANIM_DUR, STD_EASING]];\n\t}\n\t// bar.animate({height: args.newHeight, y: yTop}, UNIT_ANIM_DUR, mina.easein);\n}\n\nexport function animateDot(dot, x, y) {\n\tif(dot.nodeName !== 'circle') {\n\t\tlet oldCoordStr = dot.getAttribute(\"transform\").split(\"(\")[1].slice(0, -1);\n\t\tlet groupAnim = translate(dot, oldCoordStr, [x, y], MARKER_LINE_ANIM_DUR);\n\t\treturn [groupAnim];\n\t} else {\n\t\treturn [[dot, {cx: x, cy: y}, UNIT_ANIM_DUR, STD_EASING]];\n\t}\n\t// dot.animate({cy: yTop}, UNIT_ANIM_DUR, mina.easein);\n}\n\nexport function animatePath(paths, newXList, newYList, zeroLine, spline) {\n\tlet pathComponents = [];\n\tlet pointsStr = newYList.map((y, i) => (newXList[i] + ',' + y)).join(\"L\");\n\n\tif (spline)\n\t\tpointsStr = getSplineCurvePointsStr(newXList, newYList);\n\n\tconst animPath = [paths.path, {d:\"M\" + pointsStr}, PATH_ANIM_DUR, STD_EASING];\n\tpathComponents.push(animPath);\n\n\tif(paths.region) {\n\t\tlet regStartPt = `${newXList[0]},${zeroLine}L`;\n\t\tlet regEndPt = `L${newXList.slice(-1)[0]}, ${zeroLine}`;\n\n\t\tconst animRegion = [\n\t\t\tpaths.region,\n\t\t\t{d:\"M\" + regStartPt + pointsStr + regEndPt},\n\t\t\tPATH_ANIM_DUR,\n\t\t\tSTD_EASING\n\t\t];\n\t\tpathComponents.push(animRegion);\n\t}\n\n\treturn pathComponents;\n}\n\nexport function animatePathStr(oldPath, pathStr) {\n\treturn [oldPath, {d: pathStr}, UNIT_ANIM_DUR, STD_EASING];\n}\n", "// Leveraging SMIL Animations\n\nimport { REPLACE_ALL_NEW_DUR } from './animate';\n\nconst EASING = {\n\tease: \"0.25 0.1 0.25 1\",\n\tlinear: \"0 0 1 1\",\n\t// easein: \"0.42 0 1 1\",\n\teasein: \"0.1 0.8 0.2 1\",\n\teaseout: \"0 0 0.58 1\",\n\teaseinout: \"0.42 0 0.58 1\"\n};\n\nfunction animateSVGElement(element, props, dur, easingType=\"linear\", type=undefined, oldValues={}) {\n\n\tlet animElement = element.cloneNode(true);\n\tlet newElement = element.cloneNode(true);\n\n\tfor(var attributeName in props) {\n\t\tlet animateElement;\n\t\tif(attributeName === 'transform') {\n\t\t\tanimateElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateTransform\");\n\t\t} else {\n\t\t\tanimateElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animate\");\n\t\t}\n\t\tlet currentValue = oldValues[attributeName] || element.getAttribute(attributeName);\n\t\tlet value = props[attributeName];\n\n\t\tlet animAttr = {\n\t\t\tattributeName: attributeName,\n\t\t\tfrom: currentValue,\n\t\t\tto: value,\n\t\t\tbegin: \"0s\",\n\t\t\tdur: dur/1000 + \"s\",\n\t\t\tvalues: currentValue + \";\" + value,\n\t\t\tkeySplines: EASING[easingType],\n\t\t\tkeyTimes: \"0;1\",\n\t\t\tcalcMode: \"spline\",\n\t\t\tfill: 'freeze'\n\t\t};\n\n\t\tif(type) {\n\t\t\tanimAttr[\"type\"] = type;\n\t\t}\n\n\t\tfor (var i in animAttr) {\n\t\t\tanimateElement.setAttribute(i, animAttr[i]);\n\t\t}\n\n\t\tanimElement.appendChild(animateElement);\n\n\t\tif(type) {\n\t\t\tnewElement.setAttribute(attributeName, `translate(${value})`);\n\t\t} else {\n\t\t\tnewElement.setAttribute(attributeName, value);\n\t\t}\n\t}\n\n\treturn [animElement, newElement];\n}\n\nexport function transform(element, style) { // eslint-disable-line no-unused-vars\n\telement.style.transform = style;\n\telement.style.webkitTransform = style;\n\telement.style.msTransform = style;\n\telement.style.mozTransform = style;\n\telement.style.oTransform = style;\n}\n\nfunction animateSVG(svgContainer, elements) {\n\tlet newElements = [];\n\tlet animElements = [];\n\n\telements.map(element => {\n\t\tlet unit = element[0];\n\t\tlet parent = unit.parentNode;\n\n\t\tlet animElement, newElement;\n\n\t\telement[0] = unit;\n\t\t[animElement, newElement] = animateSVGElement(...element);\n\n\t\tnewElements.push(newElement);\n\t\tanimElements.push([animElement, parent]);\n\t\t\n\t\tif (parent) {\n\t\t\tparent.replaceChild(animElement, unit);\n\t\t}\n\t});\n\n\tlet animSvg = svgContainer.cloneNode(true);\n\n\tanimElements.map((animElement, i) => {\n\t\tif (animElement[1]) {\n\t\t\tanimElement[1].replaceChild(newElements[i], animElement[0]);\n\t\t\telements[i][0] = newElements[i];\n\t\t}\n\t});\n\n\treturn animSvg;\n}\n\nexport function runSMILAnimation(parent, svgElement, elementsToAnimate) {\n\tif(elementsToAnimate.length === 0) return;\n\n\tlet animSvgElement = animateSVG(svgElement, elementsToAnimate);\n\tif(svgElement.parentNode == parent) {\n\t\tparent.removeChild(svgElement);\n\t\tparent.appendChild(animSvgElement);\n\n\t}\n\n\t// Replace the new svgElement (data has already been replaced)\n\tsetTimeout(() => {\n\t\tif(animSvgElement.parentNode == parent) {\n\t\t\tparent.removeChild(animSvgElement);\n\t\t\tparent.appendChild(svgElement);\n\t\t}\n\t}, REPLACE_ALL_NEW_DUR);\n}\n", "import { $ } from '../utils/dom';\nimport { CSSTEXT } from '../../css/chartsCss';\n\nexport function downloadFile(filename, data) {\n\tvar a = document.createElement('a');\n\ta.style = \"display: none\";\n\tvar blob = new Blob(data, {type: \"image/svg+xml; charset=utf-8\"});\n\tvar url = window.URL.createObjectURL(blob);\n\ta.href = url;\n\ta.download = filename;\n\tdocument.body.appendChild(a);\n\ta.click();\n\tsetTimeout(function(){\n\t\tdocument.body.removeChild(a);\n\t\twindow.URL.revokeObjectURL(url);\n\t}, 300);\n}\n\nexport function prepareForExport(svg) {\n\tlet clone = svg.cloneNode(true);\n\tclone.classList.add('chart-container');\n\tclone.setAttribute('xmlns', \"http://www.w3.org/2000/svg\");\n\tclone.setAttribute('xmlns:xlink', \"http://www.w3.org/1999/xlink\");\n\tlet styleEl = $.create('style', {\n\t\t'innerHTML': CSSTEXT\n\t});\n\tclone.insertBefore(styleEl, clone.firstChild);\n\n\tlet container = $.create('div');\n\tcontainer.appendChild(clone);\n\n\treturn container.innerHTML;\n}\n", "// Playing around with dates\n\nexport const NO_OF_YEAR_MONTHS = 12;\nexport const NO_OF_DAYS_IN_WEEK = 7;\nexport const DAYS_IN_YEAR = 375;\nexport const NO_OF_MILLIS = 1000;\nexport const SEC_IN_DAY = 86400;\n\nexport const MONTH_NAMES = [\"January\", \"February\", \"March\", \"April\", \"May\",\n\t\"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport const MONTH_NAMES_SHORT = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\t\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const DAY_NAMES_SHORT = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nexport const DAY_NAMES = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n\t\"Thursday\", \"Friday\", \"Saturday\"];\n\n// https://stackoverflow.com/a/11252167/6495043\nfunction treatAsUtc(date) {\n\tlet result = new Date(date);\n\tresult.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n\treturn result;\n}\n\nexport function getYyyyMmDd(date) {\n\tlet dd = date.getDate();\n\tlet mm = date.getMonth() + 1; // getMonth() is zero-based\n\treturn [\n\t\tdate.getFullYear(),\n\t\t(mm>9 ? '' : '0') + mm,\n\t\t(dd>9 ? '' : '0') + dd\n\t].join('-');\n}\n\nexport function clone(date) {\n\treturn new Date(date.getTime());\n}\n\nexport function timestampSec(date) {\n\treturn date.getTime()/NO_OF_MILLIS;\n}\n\nexport function timestampToMidnight(timestamp, roundAhead = false) {\n\tlet midnightTs = Math.floor(timestamp - (timestamp % SEC_IN_DAY));\n\tif(roundAhead) {\n\t\treturn midnightTs + SEC_IN_DAY;\n\t}\n\treturn midnightTs;\n}\n\n// export function getMonthsBetween(startDate, endDate) {}\n\nexport function getWeeksBetween(startDate, endDate) {\n\tlet weekStartDate = setDayToSunday(startDate);\n\treturn Math.ceil(getDaysBetween(weekStartDate, endDate) / NO_OF_DAYS_IN_WEEK);\n}\n\nexport function getDaysBetween(startDate, endDate) {\n\tlet millisecondsPerDay = SEC_IN_DAY * NO_OF_MILLIS;\n\treturn (treatAsUtc(endDate) - treatAsUtc(startDate)) / millisecondsPerDay;\n}\n\nexport function areInSameMonth(startDate, endDate) {\n\treturn startDate.getMonth() === endDate.getMonth()\n\t\t&& startDate.getFullYear() === endDate.getFullYear();\n}\n\nexport function getMonthName(i, short=false) {\n\tlet monthName = MONTH_NAMES[i];\n\treturn short ? monthName.slice(0, 3) : monthName;\n}\n\nexport function getLastDateInMonth (month, year) {\n\treturn new Date(year, month + 1, 0); // 0: last day in previous month\n}\n\n// mutates\nexport function setDayToSunday(date) {\n\tlet newDate = clone(date);\n\tconst day = newDate.getDay();\n\tif(day !== 0) {\n\t\taddDays(newDate, (-1) * day);\n\t}\n\treturn newDate;\n}\n\n// mutates\nexport function addDays(date, numberOfDays) {\n\tdate.setDate(date.getDate() + numberOfDays);\n}\n", "import { makeSVGGroup } from '../utils/draw';\nimport { makeText, makePath, xLine, yLine, yMarker, yRegion, datasetBar, datasetDot, percentageBar, getPaths, heatSquare } from '../utils/draw';\nimport { equilizeNoOfElements } from '../utils/draw-utils';\nimport { translateHoriLine, translateVertLine, animateRegion, animateBar,\n\tanimateDot, animatePath, animatePathStr } from '../utils/animate';\nimport { getMonthName } from '../utils/date-utils';\n\nclass ChartComponent {\n\tconstructor({\n\t\tlayerClass = '',\n\t\tlayerTransform = '',\n\t\tconstants,\n\n\t\tgetData,\n\t\tmakeElements,\n\t\tanimateElements\n\t}) {\n\t\tthis.layerTransform = layerTransform;\n\t\tthis.constants = constants;\n\n\t\tthis.makeElements = makeElements;\n\t\tthis.getData = getData;\n\n\t\tthis.animateElements = animateElements;\n\n\t\tthis.store = [];\n\t\tthis.labels = [];\n\n\t\tthis.layerClass = layerClass;\n\t\tthis.layerClass = typeof(this.layerClass) === 'function'\n\t\t\t? this.layerClass() : this.layerClass;\n\n\t\tthis.refresh();\n\t}\n\n\trefresh(data) {\n\t\tthis.data = data || this.getData();\n\t}\n\n\tsetup(parent) {\n\t\tthis.layer = makeSVGGroup(this.layerClass, this.layerTransform, parent);\n\t}\n\n\tmake() {\n\t\tthis.render(this.data);\n\t\tthis.oldData = this.data;\n\t}\n\n\trender(data) {\n\t\tthis.store = this.makeElements(data);\n\n\t\tthis.layer.textContent = '';\n\t\tthis.store.forEach(element => {\n\t\t\tthis.layer.appendChild(element);\n\t\t});\n\t\tthis.labels.forEach(element => {\n\t\t\tthis.layer.appendChild(element);\n\t\t});\n\t}\n\n\tupdate(animate = true) {\n\t\tthis.refresh();\n\t\tlet animateElements = [];\n\t\tif(animate) {\n\t\t\tanimateElements = this.animateElements(this.data) || [];\n\t\t}\n\t\treturn animateElements;\n\t}\n}\n\nlet componentConfigs = {\n\tdonutSlices: {\n\t\tlayerClass: 'donut-slices',\n\t\tmakeElements(data) {\n\t\t\treturn data.sliceStrings.map((s, i) => {\n\t\t\t\tlet slice = makePath(s, 'donut-path', data.colors[i], 'none', data.strokeWidth);\n\t\t\t\tslice.style.transition = 'transform .3s;';\n\t\t\t\treturn slice;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\treturn this.store.map((slice, i) => animatePathStr(slice, newData.sliceStrings[i]));\n\t\t},\n\t},\n\tpieSlices: {\n\t\tlayerClass: 'pie-slices',\n\t\tmakeElements(data) {\n\t\t\treturn data.sliceStrings.map((s, i) =>{\n\t\t\t\tlet slice = makePath(s, 'pie-path', 'none', data.colors[i]);\n\t\t\t\tslice.style.transition = 'transform .3s;';\n\t\t\t\treturn slice;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\treturn this.store.map((slice, i) =>\n\t\t\t\tanimatePathStr(slice, newData.sliceStrings[i])\n\t\t\t);\n\t\t}\n\t},\n\tpercentageBars: {\n\t\tlayerClass: 'percentage-bars',\n\t\tmakeElements(data) {\n\t\t\treturn data.xPositions.map((x, i) =>{\n\t\t\t\tlet y = 0;\n\t\t\t\tlet bar = percentageBar(x, y, data.widths[i],\n\t\t\t\t\tthis.constants.barHeight, this.constants.barDepth, data.colors[i]);\n\t\t\t\treturn bar;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tif(newData) return [];\n\t\t}\n\t},\n\tyAxis: {\n\t\tlayerClass: 'y axis',\n\t\tmakeElements(data) {\n\t\t\treturn data.positions.map((position, i) =>\n\t\t\t\tyLine(position, data.labels[i], this.constants.width,\n\t\t\t\t\t{mode: this.constants.mode, pos: this.constants.pos, shortenNumbers: this.constants.shortenNumbers})\n\t\t\t);\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tlet newPos = newData.positions;\n\t\t\tlet newLabels = newData.labels;\n\t\t\tlet oldPos = this.oldData.positions;\n\t\t\tlet oldLabels = this.oldData.labels;\n\n\t\t\t[oldPos, newPos] = equilizeNoOfElements(oldPos, newPos);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\tpositions: oldPos,\n\t\t\t\tlabels: newLabels\n\t\t\t});\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateHoriLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\txAxis: {\n\t\tlayerClass: 'x axis',\n\t\tmakeElements(data) {\n\t\t\treturn data.positions.map((position, i) =>\n\t\t\t\txLine(position, data.calcLabels[i], this.constants.height,\n\t\t\t\t\t{mode: this.constants.mode, pos: this.constants.pos})\n\t\t\t);\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tlet newPos = newData.positions;\n\t\t\tlet newLabels = newData.calcLabels;\n\t\t\tlet oldPos = this.oldData.positions;\n\t\t\tlet oldLabels = this.oldData.calcLabels;\n\n\t\t\t[oldPos, newPos] = equilizeNoOfElements(oldPos, newPos);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\tpositions: oldPos,\n\t\t\t\tcalcLabels: newLabels\n\t\t\t});\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateVertLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\tyMarkers: {\n\t\tlayerClass: 'y-markers',\n\t\tmakeElements(data) {\n\t\t\treturn data.map(m =>\n\t\t\t\tyMarker(m.position, m.label, this.constants.width,\n\t\t\t\t\t{labelPos: m.options.labelPos, mode: 'span', lineType: 'dashed'})\n\t\t\t);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\t[this.oldData, newData] = equilizeNoOfElements(this.oldData, newData);\n\n\t\t\tlet newPos = newData.map(d => d.position);\n\t\t\tlet newLabels = newData.map(d => d.label);\n\t\t\tlet newOptions = newData.map(d => d.options);\n\n\t\t\tlet oldPos = this.oldData.map(d => d.position);\n\n\t\t\tthis.render(oldPos.map((pos, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tposition: oldPos[i],\n\t\t\t\t\tlabel: newLabels[i],\n\t\t\t\t\toptions: newOptions[i]\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateHoriLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\tyRegions: {\n\t\tlayerClass: 'y-regions',\n\t\tmakeElements(data) {\n\t\t\treturn data.map(r =>\n\t\t\t\tyRegion(r.startPos, r.endPos, this.constants.width,\n\t\t\t\t\tr.label, {labelPos: r.options.labelPos})\n\t\t\t);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\t[this.oldData, newData] = equilizeNoOfElements(this.oldData, newData);\n\n\t\t\tlet newPos = newData.map(d => d.endPos);\n\t\t\tlet newLabels = newData.map(d => d.label);\n\t\t\tlet newStarts = newData.map(d => d.startPos);\n\t\t\tlet newOptions = newData.map(d => d.options);\n\n\t\t\tlet oldPos = this.oldData.map(d => d.endPos);\n\t\t\tlet oldStarts = this.oldData.map(d => d.startPos);\n\n\t\t\tthis.render(oldPos.map((pos, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tstartPos: oldStarts[i],\n\t\t\t\t\tendPos: oldPos[i],\n\t\t\t\t\tlabel: newLabels[i],\n\t\t\t\t\toptions: newOptions[i]\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\tlet animateElements = [];\n\n\t\t\tthis.store.map((rectGroup, i) => {\n\t\t\t\tanimateElements = animateElements.concat(animateRegion(\n\t\t\t\t\trectGroup, newStarts[i], newPos[i], oldPos[i]\n\t\t\t\t));\n\t\t\t});\n\n\t\t\treturn animateElements;\n\t\t}\n\t},\n\n\theatDomain: {\n\t\tlayerClass: function() { return 'heat-domain domain-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet {index, colWidth, rowHeight, squareSize, radius, xTranslate} = this.constants;\n\t\t\tlet monthNameHeight = -12;\n\t\t\tlet x = xTranslate, y = 0;\n\n\t\t\tthis.serializedSubDomains = [];\n\n\t\t\tdata.cols.map((week, weekNo) => {\n\t\t\t\tif(weekNo === 1) {\n\t\t\t\t\tthis.labels.push(\n\t\t\t\t\t\tmakeText('domain-name', x, monthNameHeight, getMonthName(index, true).toUpperCase(),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfontSize: 9\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tweek.map((day, i) => {\n\t\t\t\t\tif(day.fill) {\n\t\t\t\t\t\tlet data = {\n\t\t\t\t\t\t\t'data-date': day.yyyyMmDd,\n\t\t\t\t\t\t\t'data-value': day.dataValue,\n\t\t\t\t\t\t\t'data-day': i\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet square = heatSquare('day', x, y, squareSize, radius, day.fill, data);\n\t\t\t\t\t\tthis.serializedSubDomains.push(square);\n\t\t\t\t\t}\n\t\t\t\t\ty += rowHeight;\n\t\t\t\t});\n\t\t\t\ty = 0;\n\t\t\t\tx += colWidth;\n\t\t\t});\n\n\t\t\treturn this.serializedSubDomains;\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tif(newData) return [];\n\t\t}\n\t},\n\n\tbarGraph: {\n\t\tlayerClass: function() { return 'dataset-units dataset-bars dataset-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet c = this.constants;\n\t\t\tthis.unitType = 'bar';\n\t\t\tthis.units = data.yPositions.map((y, j) => {\n\t\t\t\treturn datasetBar(\n\t\t\t\t\tdata.xPositions[j],\n\t\t\t\t\ty,\n\t\t\t\t\tdata.barWidth,\n\t\t\t\t\tc.color,\n\t\t\t\t\tdata.labels[j],\n\t\t\t\t\tj,\n\t\t\t\t\tdata.offsets[j],\n\t\t\t\t\t{\n\t\t\t\t\t\tzeroLine: data.zeroLine,\n\t\t\t\t\t\tbarsWidth: data.barsWidth,\n\t\t\t\t\t\tminHeight: c.minHeight\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn this.units;\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\tlet newXPos = newData.xPositions;\n\t\t\tlet newYPos = newData.yPositions;\n\t\t\tlet newOffsets = newData.offsets;\n\t\t\tlet newLabels = newData.labels;\n\n\t\t\tlet oldXPos = this.oldData.xPositions;\n\t\t\tlet oldYPos = this.oldData.yPositions;\n\t\t\tlet oldOffsets = this.oldData.offsets;\n\t\t\tlet oldLabels = this.oldData.labels;\n\n\t\t\t[oldXPos, newXPos] = equilizeNoOfElements(oldXPos, newXPos);\n\t\t\t[oldYPos, newYPos] = equilizeNoOfElements(oldYPos, newYPos);\n\t\t\t[oldOffsets, newOffsets] = equilizeNoOfElements(oldOffsets, newOffsets);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\txPositions: oldXPos,\n\t\t\t\tyPositions: oldYPos,\n\t\t\t\toffsets: oldOffsets,\n\t\t\t\tlabels: newLabels,\n\n\t\t\t\tzeroLine: this.oldData.zeroLine,\n\t\t\t\tbarsWidth: this.oldData.barsWidth,\n\t\t\t\tbarWidth: this.oldData.barWidth,\n\t\t\t});\n\n\t\t\tlet animateElements = [];\n\n\t\t\tthis.store.map((bar, i) => {\n\t\t\t\tanimateElements = animateElements.concat(animateBar(\n\t\t\t\t\tbar, newXPos[i], newYPos[i], newData.barWidth, newOffsets[i],\n\t\t\t\t\t{zeroLine: newData.zeroLine}\n\t\t\t\t));\n\t\t\t});\n\n\t\t\treturn animateElements;\n\t\t}\n\t},\n\n\tlineGraph: {\n\t\tlayerClass: function() { return 'dataset-units dataset-line dataset-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet c = this.constants;\n\t\t\tthis.unitType = 'dot';\n\t\t\tthis.paths = {};\n\t\t\tif(!c.hideLine) {\n\t\t\t\tthis.paths = getPaths(\n\t\t\t\t\tdata.xPositions,\n\t\t\t\t\tdata.yPositions,\n\t\t\t\t\tc.color,\n\t\t\t\t\t{\n\t\t\t\t\t\theatline: c.heatline,\n\t\t\t\t\t\tregionFill: c.regionFill,\n\t\t\t\t\t\tspline: c.spline\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tsvgDefs: c.svgDefs,\n\t\t\t\t\t\tzeroLine: data.zeroLine\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.units = [];\n\t\t\tif(!c.hideDots) {\n\t\t\t\tthis.units = data.yPositions.map((y, j) => {\n\t\t\t\t\treturn datasetDot(\n\t\t\t\t\t\tdata.xPositions[j],\n\t\t\t\t\t\ty,\n\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\tc.color,\n\t\t\t\t\t\t(c.valuesOverPoints ? data.values[j] : ''),\n\t\t\t\t\t\tj\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Object.values(this.paths).concat(this.units);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\tlet newXPos = newData.xPositions;\n\t\t\tlet newYPos = newData.yPositions;\n\t\t\tlet newValues = newData.values;\n\n\t\t\tlet oldXPos = this.oldData.xPositions;\n\t\t\tlet oldYPos = this.oldData.yPositions;\n\t\t\tlet oldValues = this.oldData.values;\n\n\t\t\t[oldXPos, newXPos] = equilizeNoOfElements(oldXPos, newXPos);\n\t\t\t[oldYPos, newYPos] = equilizeNoOfElements(oldYPos, newYPos);\n\t\t\t[oldValues, newValues] = equilizeNoOfElements(oldValues, newValues);\n\n\t\t\tthis.render({\n\t\t\t\txPositions: oldXPos,\n\t\t\t\tyPositions: oldYPos,\n\t\t\t\tvalues: newValues,\n\n\t\t\t\tzeroLine: this.oldData.zeroLine,\n\t\t\t\tradius: this.oldData.radius,\n\t\t\t});\n\n\t\t\tlet animateElements = [];\n\n\t\t\tif(Object.keys(this.paths).length) {\n\t\t\t\tanimateElements = animateElements.concat(animatePath(\n\t\t\t\t\tthis.paths, newXPos, newYPos, newData.zeroLine, this.constants.spline));\n\t\t\t}\n\n\t\t\tif(this.units.length) {\n\t\t\t\tthis.units.map((dot, i) => {\n\t\t\t\t\tanimateElements = animateElements.concat(animateDot(\n\t\t\t\t\t\tdot, newXPos[i], newYPos[i]));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn animateElements;\n\t\t}\n\t}\n};\n\nexport function getComponent(name, constants, getData) {\n\tlet keys = Object.keys(componentConfigs).filter(k => name.includes(k));\n\tlet config = componentConfigs[keys[0]];\n\tObject.assign(config, {\n\t\tconstants: constants,\n\t\tgetData: getData\n\t});\n\treturn new ChartComponent(config);\n}\n", "import { floatTwo } from './helpers';\n\nfunction normalize(x) {\n\t// Calculates mantissa and exponent of a number\n\t// Returns normalized number and exponent\n\t// https://stackoverflow.com/q/9383593/6495043\n\n\tif(x===0) {\n\t\treturn [0, 0];\n\t}\n\tif(isNaN(x)) {\n\t\treturn {mantissa: -6755399441055744, exponent: 972};\n\t}\n\tvar sig = x > 0 ? 1 : -1;\n\tif(!isFinite(x)) {\n\t\treturn {mantissa: sig * 4503599627370496, exponent: 972};\n\t}\n\n\tx = Math.abs(x);\n\tvar exp = Math.floor(Math.log10(x));\n\tvar man = x/Math.pow(10, exp);\n\n\treturn [sig * man, exp];\n}\n\nfunction getChartRangeIntervals(max, min=0) {\n\tlet upperBound = Math.ceil(max);\n\tlet lowerBound = Math.floor(min);\n\tlet range = upperBound - lowerBound;\n\n\tlet noOfParts = range;\n\tlet partSize = 1;\n\n\t// To avoid too many partitions\n\tif(range > 5) {\n\t\tif(range % 2 !== 0) {\n\t\t\tupperBound++;\n\t\t\t// Recalc range\n\t\t\trange = upperBound - lowerBound;\n\t\t}\n\t\tnoOfParts = range/2;\n\t\tpartSize = 2;\n\t}\n\n\t// Special case: 1 and 2\n\tif(range <= 2) {\n\t\tnoOfParts = 4;\n\t\tpartSize = range/noOfParts;\n\t}\n\n\t// Special case: 0\n\tif(range === 0) {\n\t\tnoOfParts = 5;\n\t\tpartSize = 1;\n\t}\n\n\tlet intervals = [];\n\tfor(var i = 0; i <= noOfParts; i++){\n\t\tintervals.push(lowerBound + partSize * i);\n\t}\n\treturn intervals;\n}\n\nfunction getChartIntervals(maxValue, minValue=0) {\n\tlet [normalMaxValue, exponent] = normalize(maxValue);\n\tlet normalMinValue = minValue ? minValue/Math.pow(10, exponent): 0;\n\n\t// Allow only 7 significant digits\n\tnormalMaxValue = normalMaxValue.toFixed(6);\n\n\tlet intervals = getChartRangeIntervals(normalMaxValue, normalMinValue);\n\tintervals = intervals.map(value => value * Math.pow(10, exponent));\n\treturn intervals;\n}\n\nexport function calcChartIntervals(values, withMinimum=false) {\n\t//*** Where the magic happens ***\n\n\t// Calculates best-fit y intervals from given values\n\t// and returns the interval array\n\n\tlet maxValue = Math.max(...values);\n\tlet minValue = Math.min(...values);\n\n\t// Exponent to be used for pretty print\n\tlet exponent = 0, intervals = []; // eslint-disable-line no-unused-vars\n\n\tfunction getPositiveFirstIntervals(maxValue, absMinValue) {\n\t\tlet intervals = getChartIntervals(maxValue);\n\n\t\tlet intervalSize = intervals[1] - intervals[0];\n\n\t\t// Then unshift the negative values\n\t\tlet value = 0;\n\t\tfor(var i = 1; value < absMinValue; i++) {\n\t\t\tvalue += intervalSize;\n\t\t\tintervals.unshift((-1) * value);\n\t\t}\n\t\treturn intervals;\n\t}\n\n\t// CASE I: Both non-negative\n\n\tif(maxValue >= 0 && minValue >= 0) {\n\t\texponent = normalize(maxValue)[1];\n\t\tif(!withMinimum) {\n\t\t\tintervals = getChartIntervals(maxValue);\n\t\t} else {\n\t\t\tintervals = getChartIntervals(maxValue, minValue);\n\t\t}\n\t}\n\n\t// CASE II: Only minValue negative\n\n\telse if(maxValue > 0 && minValue < 0) {\n\t\t// `withMinimum` irrelevant in this case,\n\t\t// We'll be handling both sides of zero separately\n\t\t// (both starting from zero)\n\t\t// Because ceil() and floor() behave differently\n\t\t// in those two regions\n\n\t\tlet absMinValue = Math.abs(minValue);\n\n\t\tif(maxValue >= absMinValue) {\n\t\t\texponent = normalize(maxValue)[1];\n\t\t\tintervals = getPositiveFirstIntervals(maxValue, absMinValue);\n\t\t} else {\n\t\t\t// Mirror: maxValue => absMinValue, then change sign\n\t\t\texponent = normalize(absMinValue)[1];\n\t\t\tlet posIntervals = getPositiveFirstIntervals(absMinValue, maxValue);\n\t\t\tintervals = posIntervals.reverse().map(d => d * (-1));\n\t\t}\n\n\t}\n\n\t// CASE III: Both non-positive\n\n\telse if(maxValue <= 0 && minValue <= 0) {\n\t\t// Mirrored Case I:\n\t\t// Work with positives, then reverse the sign and array\n\n\t\tlet pseudoMaxValue = Math.abs(minValue);\n\t\tlet pseudoMinValue = Math.abs(maxValue);\n\n\t\texponent = normalize(pseudoMaxValue)[1];\n\t\tif(!withMinimum) {\n\t\t\tintervals = getChartIntervals(pseudoMaxValue);\n\t\t} else {\n\t\t\tintervals = getChartIntervals(pseudoMaxValue, pseudoMinValue);\n\t\t}\n\n\t\tintervals = intervals.reverse().map(d => d * (-1));\n\t}\n\n\treturn intervals;\n}\n\nexport function getZeroIndex(yPts) {\n\tlet zeroIndex;\n\tlet interval = getIntervalSize(yPts);\n\tif(yPts.indexOf(0) >= 0) {\n\t\t// the range has a given zero\n\t\t// zero-line on the chart\n\t\tzeroIndex = yPts.indexOf(0);\n\t} else if(yPts[0] > 0) {\n\t\t// Minimum value is positive\n\t\t// zero-line is off the chart: below\n\t\tlet min = yPts[0];\n\t\tzeroIndex = (-1) * min / interval;\n\t} else {\n\t\t// Maximum value is negative\n\t\t// zero-line is off the chart: above\n\t\tlet max = yPts[yPts.length - 1];\n\t\tzeroIndex = (-1) * max / interval + (yPts.length - 1);\n\t}\n\treturn zeroIndex;\n}\n\nexport function getRealIntervals(max, noOfIntervals, min = 0, asc = 1) {\n\tlet range = max - min;\n\tlet part = range * 1.0 / noOfIntervals;\n\tlet intervals = [];\n\n\tfor(var i = 0; i <= noOfIntervals; i++) {\n\t\tintervals.push(min + part * i);\n\t}\n\n\treturn asc ? intervals : intervals.reverse();\n}\n\nexport function getIntervalSize(orderedArray) {\n\treturn orderedArray[1] - orderedArray[0];\n}\n\nexport function getValueRange(orderedArray) {\n\treturn orderedArray[orderedArray.length-1] - orderedArray[0];\n}\n\nexport function scale(val, yAxis) {\n\treturn floatTwo(yAxis.zeroLine - val * yAxis.scaleMultiplier);\n}\n\nexport function isInRange(val, min, max) {\n\treturn val > min && val < max;\n}\n\nexport function isInRange2D(coord, minCoord, maxCoord) {\n\treturn isInRange(coord[0], minCoord[0], maxCoord[0])\n\t\t&& isInRange(coord[1], minCoord[1], maxCoord[1]);\n}\n\nexport function getClosestInArray(goal, arr, index = false) {\n\tlet closest = arr.reduce(function(prev, curr) {\n\t\treturn (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);\n\t}, []);\n\n\treturn index ? arr.indexOf(closest) : closest;\n}\n\nexport function calcDistribution(values, distributionSize) {\n\t// Assume non-negative values,\n\t// implying distribution minimum at zero\n\n\tlet dataMaxValue = Math.max(...values);\n\n\tlet distributionStep = 1 / (distributionSize - 1);\n\tlet distribution = [];\n\n\tfor(var i = 0; i < distributionSize; i++) {\n\t\tlet checkpoint = dataMaxValue * (distributionStep * i);\n\t\tdistribution.push(checkpoint);\n\t}\n\n\treturn distribution;\n}\n\nexport function getMaxCheckpoint(value, distribution) {\n\treturn distribution.filter(d => d < value).length;\n}\n", "import { fillArray } from '../utils/helpers';\nimport { DEFAULT_AXIS_CHART_TYPE, AXIS_DATASET_CHART_TYPES, DEFAULT_CHAR_WIDTH } from '../utils/constants';\n\nexport function dataPrep(data, type) {\n\tdata.labels = data.labels || [];\n\n\tlet datasetLength = data.labels.length;\n\n\t// Datasets\n\tlet datasets = data.datasets;\n\tlet zeroArray = new Array(datasetLength).fill(0);\n\tif(!datasets) {\n\t\t// default\n\t\tdatasets = [{\n\t\t\tvalues: zeroArray\n\t\t}];\n\t}\n\n\tdatasets.map(d=> {\n\t\t// Set values\n\t\tif(!d.values) {\n\t\t\td.values = zeroArray;\n\t\t} else {\n\t\t\t// Check for non values\n\t\t\tlet vals = d.values;\n\t\t\tvals = vals.map(val => (!isNaN(val) ? val : 0));\n\n\t\t\t// Trim or extend\n\t\t\tif(vals.length > datasetLength) {\n\t\t\t\tvals = vals.slice(0, datasetLength);\n\t\t\t} else {\n\t\t\t\tvals = fillArray(vals, datasetLength - vals.length, 0);\n\t\t\t}\n\t\t\td.values = vals;\n\t\t}\n\n\t\t// Set type\n\t\tif(!d.chartType ) {\n\t\t\tif(!AXIS_DATASET_CHART_TYPES.includes(type)) type === DEFAULT_AXIS_CHART_TYPE;\n\t\t\td.chartType = type;\n\t\t}\n\n\t});\n\n\t// Markers\n\n\t// Regions\n\t// data.yRegions = data.yRegions || [];\n\tif(data.yRegions) {\n\t\tdata.yRegions.map(d => {\n\t\t\tif(d.end < d.start) {\n\t\t\t\t[d.start, d.end] = [d.end, d.start];\n\t\t\t}\n\t\t});\n\t}\n\n\treturn data;\n}\n\nexport function zeroDataPrep(realData) {\n\tlet datasetLength = realData.labels.length;\n\tlet zeroArray = new Array(datasetLength).fill(0);\n\n\tlet zeroData = {\n\t\tlabels: realData.labels.slice(0, -1),\n\t\tdatasets: realData.datasets.map(d => {\n\t\t\treturn {\n\t\t\t\tname: '',\n\t\t\t\tvalues: zeroArray.slice(0, -1),\n\t\t\t\tchartType: d.chartType\n\t\t\t};\n\t\t}),\n\t};\n\n\tif(realData.yMarkers) {\n\t\tzeroData.yMarkers = [\n\t\t\t{\n\t\t\t\tvalue: 0,\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t];\n\t}\n\n\tif(realData.yRegions) {\n\t\tzeroData.yRegions = [\n\t\t\t{\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t];\n\t}\n\n\treturn zeroData;\n}\n\nexport function getShortenedLabels(chartWidth, labels=[], isSeries=true) {\n\tlet allowedSpace = chartWidth / labels.length;\n\tif(allowedSpace <= 0) allowedSpace = 1;\n\tlet allowedLetters = allowedSpace / DEFAULT_CHAR_WIDTH;\n\n\tlet seriesMultiple;\n\tif(isSeries) {\n\t\t// Find the maximum label length for spacing calculations\n\t\tlet maxLabelLength = Math.max(...labels.map(label => label.length));\n\t\tseriesMultiple = Math.ceil(maxLabelLength/allowedLetters);\n\t}\n\n\tlet calcLabels = labels.map((label, i) => {\n\t\tlabel += \"\";\n\t\tif(label.length > allowedLetters) {\n\n\t\t\tif(!isSeries) {\n\t\t\t\tif(allowedLetters-3 > 0) {\n\t\t\t\t\tlabel = label.slice(0, allowedLetters-3) + \" ...\";\n\t\t\t\t} else {\n\t\t\t\t\tlabel = label.slice(0, allowedLetters) + '..';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(i % seriesMultiple !== 0) {\n\t\t\t\t\tlabel = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn label;\n\t});\n\n\treturn calcLabels;\n}\n", "import '../css/charts.scss';\n\n// import MultiAxisChart from './charts/MultiAxisChart';\nimport PercentageChart from './charts/PercentageChart';\nimport PieChart from './charts/PieChart';\nimport Heatmap from './charts/Heatmap';\nimport AxisChart from './charts/AxisChart';\nimport DonutChart from './charts/DonutChart';\n\nconst chartTypes = {\n\tbar: AxisChart,\n\tline: AxisChart,\n\t// multiaxis: MultiAxisChart,\n\tpercentage: PercentageChart,\n\theatmap: Heatmap,\n\tpie: PieChart,\n\tdonut: DonutChart,\n};\n\nfunction getChartByType(chartType = 'line', parent, options) {\n\tif (chartType === 'axis-mixed') {\n\t\toptions.type = 'line';\n\t\treturn new AxisChart(parent, options);\n\t}\n\n\tif (!chartTypes[chartType]) {\n\t\tconsole.error(\"Undefined chart type: \" + chartType);\n\t\treturn;\n\t}\n\n\treturn new chartTypes[chartType](parent, options);\n}\n\nclass Chart {\n\tconstructor(parent, options) {\n\t\treturn getChartByType(options.type, parent, options);\n\t}\n}\n\nexport { Chart, PercentageChart, PieChart, Heatmap, AxisChart };", "import { $ } from '../utils/dom';\nimport { TOOLTIP_POINTER_TRIANGLE_HEIGHT } from '../utils/constants';\n\nexport default class SvgTip {\n\tconstructor({\n\t\tparent = null,\n\t\tcolors = []\n\t}) {\n\t\tthis.parent = parent;\n\t\tthis.colors = colors;\n\t\tthis.titleName = '';\n\t\tthis.titleValue = '';\n\t\tthis.listValues = [];\n\t\tthis.titleValueFirst = 0;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\n\t\tthis.top = 0;\n\t\tthis.left = 0;\n\n\t\tthis.setup();\n\t}\n\n\tsetup() {\n\t\tthis.makeTooltip();\n\t}\n\n\trefresh() {\n\t\tthis.fill();\n\t\tthis.calcPosition();\n\t}\n\n\tmakeTooltip() {\n\t\tthis.container = $.create('div', {\n\t\t\tinside: this.parent,\n\t\t\tclassName: 'graph-svg-tip comparison',\n\t\t\tinnerHTML: `<span class=\"title\"></span>\n\t\t\t\t<ul class=\"data-point-list\"></ul>\n\t\t\t\t<div class=\"svg-pointer\"></div>`\n\t\t});\n\t\tthis.hideTip();\n\n\t\tthis.title = this.container.querySelector('.title');\n\t\tthis.dataPointList = this.container.querySelector('.data-point-list');\n\n\t\tthis.parent.addEventListener('mouseleave', () => {\n\t\t\tthis.hideTip();\n\t\t});\n\t}\n\n\tfill() {\n\t\tlet title;\n\t\tif(this.index) {\n\t\t\tthis.container.setAttribute('data-point-index', this.index);\n\t\t}\n\t\tif(this.titleValueFirst) {\n\t\t\ttitle = `<strong>${this.titleValue}</strong>${this.titleName}`;\n\t\t} else {\n\t\t\ttitle = `${this.titleName}<strong>${this.titleValue}</strong>`;\n\t\t}\n\t\tthis.title.innerHTML = title;\n\t\tthis.dataPointList.innerHTML = '';\n\n\t\tthis.listValues.map((set, i) => {\n\t\t\tconst color = this.colors[i] || 'black';\n\t\t\tlet value = set.formatted === 0 || set.formatted ? set.formatted : set.value;\n\n\t\t\tlet li = $.create('li', {\n\t\t\t\tstyles: {\n\t\t\t\t\t'border-top': `3px solid ${color}`\n\t\t\t\t},\n\t\t\t\tinnerHTML: `<strong style=\"display: block;\">${ value === 0 || value ? value : '' }</strong>\n\t\t\t\t\t${set.title ? set.title : '' }`\n\t\t\t});\n\n\t\t\tthis.dataPointList.appendChild(li);\n\t\t});\n\t}\n\n\tcalcPosition() {\n\t\tlet width = this.container.offsetWidth;\n\n\t\tthis.top = this.y - this.container.offsetHeight\n\t\t\t- TOOLTIP_POINTER_TRIANGLE_HEIGHT;\n\t\tthis.left = this.x - width/2;\n\t\tlet maxLeft = this.parent.offsetWidth - width;\n\n\t\tlet pointer = this.container.querySelector('.svg-pointer');\n\n\t\tif(this.left < 0) {\n\t\t\tpointer.style.left = `calc(50% - ${-1 * this.left}px)`;\n\t\t\tthis.left = 0;\n\t\t} else if(this.left > maxLeft) {\n\t\t\tlet delta = this.left - maxLeft;\n\t\t\tlet pointerOffset = `calc(50% + ${delta}px)`;\n\t\t\tpointer.style.left = pointerOffset;\n\n\t\t\tthis.left = maxLeft;\n\t\t} else {\n\t\t\tpointer.style.left = `50%`;\n\t\t}\n\t}\n\n\tsetValues(x, y, title = {}, listValues = [], index = -1) {\n\t\tthis.titleName = title.name;\n\t\tthis.titleValue = title.value;\n\t\tthis.listValues = listValues;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.titleValueFirst = title.valueFirst || 0;\n\t\tthis.index = index;\n\t\tthis.refresh();\n\t}\n\n\thideTip() {\n\t\tthis.container.style.top = '0px';\n\t\tthis.container.style.left = '0px';\n\t\tthis.container.style.opacity = '0';\n\t}\n\n\tshowTip() {\n\t\tthis.container.style.top = this.top + 'px';\n\t\tthis.container.style.left = this.left + 'px';\n\t\tthis.container.style.opacity = '1';\n\t}\n}\n", "export const CSSTEXT = \".chart-container{position:relative;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira Sans','Droid Sans','Helvetica Neue',sans-serif}.chart-container .axis,.chart-container .chart-label{fill:#555b51}.chart-container .axis line,.chart-container .chart-label line{stroke:#dadada}.chart-container .dataset-units circle{stroke:#fff;stroke-width:2}.chart-container .dataset-units path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container .dataset-path{stroke-width:2px}.chart-container .path-group path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container line.dashed{stroke-dasharray:5,3}.chart-container .axis-line .specific-value{text-anchor:start}.chart-container .axis-line .y-line{text-anchor:end}.chart-container .axis-line .x-line{text-anchor:middle}.chart-container .legend-dataset-text{fill:#6c7680;font-weight:600}.graph-svg-tip{position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.8);border-radius:3px}.graph-svg-tip ul{padding-left:0;display:flex}.graph-svg-tip ol{padding-left:0;display:flex}.graph-svg-tip ul.data-point-list li{min-width:90px;flex:1;font-weight:600}.graph-svg-tip strong{color:#dfe2e5;font-weight:600}.graph-svg-tip .svg-pointer{position:absolute;height:5px;margin:0 0 0 -5px;content:' ';border:5px solid transparent;border-top-color:rgba(0,0,0,.8)}.graph-svg-tip.comparison{padding:0;text-align:left;pointer-events:none}.graph-svg-tip.comparison .title{display:block;padding:10px;margin:0;font-weight:600;line-height:1;pointer-events:none}.graph-svg-tip.comparison ul{margin:0;white-space:nowrap;list-style:none}.graph-svg-tip.comparison li{display:inline-block;padding:5px 10px}\";", "import SvgTip from '../objects/SvgTip';\nimport { $, isElementInViewport, getElementContentWidth, isHidden } from '../utils/dom';\nimport { makeSVGContainer, makeSVGDefs, makeSVGGroup, makeText } from '../utils/draw';\nimport { BASE_MEASURES, getExtraHeight, getExtraWidth, getTopOffset, getLeftOffset,\n\tINIT_CHART_UPDATE_TIMEOUT, CHART_POST_ANIMATE_TIMEOUT, DEFAULT_COLORS} from '../utils/constants';\nimport { getColor, isValidColor } from '../utils/colors';\nimport { runSMILAnimation } from '../utils/animation';\nimport { downloadFile, prepareForExport } from '../utils/export';\nimport { deepClone } from  '../utils/helpers';\n\nexport default class BaseChart {\n\tconstructor(parent, options) {\n\t\t// deepclone options to avoid making changes to orignal object\n\t\toptions = deepClone(options);\n\n\t\tthis.parent = typeof parent === 'string'\n\t\t\t? document.querySelector(parent)\n\t\t\t: parent;\n\n\t\tif (!(this.parent instanceof HTMLElement)) {\n\t\t\tthrow new Error('No `parent` element to render on was provided.');\n\t\t}\n\n\t\tthis.rawChartArgs = options;\n\n\t\tthis.title = options.title || '';\n\t\tthis.type = options.type || '';\n\n\t\tthis.realData = this.prepareData(options.data);\n\t\tthis.data = this.prepareFirstData(this.realData);\n\n\t\tthis.colors = this.validateColors(options.colors, this.type);\n\n\t\tthis.config = {\n\t\t\tshowTooltip: 1, // calculate\n\t\t\tshowLegend: 1, // calculate\n\t\t\tisNavigable: options.isNavigable || 0,\n\t\t\tanimate: (typeof options.animate !== 'undefined') ? options.animate : 1,\n\t\t\ttruncateLegends: options.truncateLegends || 1\n\t\t};\n\n\t\tthis.measures = JSON.parse(JSON.stringify(BASE_MEASURES));\n\t\tlet m = this.measures;\n\t\tthis.setMeasures(options);\n\t\tif(!this.title.length) { m.titleHeight = 0; }\n\t\tif(!this.config.showLegend) m.legendHeight = 0;\n\t\tthis.argHeight = options.height || m.baseHeight;\n\n\t\tthis.state = {};\n\t\tthis.options = {};\n\n\t\tthis.initTimeout = INIT_CHART_UPDATE_TIMEOUT;\n\n\t\tif(this.config.isNavigable) {\n\t\t\tthis.overlays = [];\n\t\t}\n\n\t\tthis.configure(options);\n\t}\n\n\tprepareData(data) {\n\t\treturn data;\n\t}\n\n\tprepareFirstData(data) {\n\t\treturn data;\n\t}\n\n\tvalidateColors(colors, type) {\n\t\tconst validColors = [];\n\t\tcolors = (colors || []).concat(DEFAULT_COLORS[type]);\n\t\tcolors.forEach((string) => {\n\t\t\tconst color = getColor(string);\n\t\t\tif(!isValidColor(color)) {\n\t\t\t\tconsole.warn('\"' + string + '\" is not a valid color.');\n\t\t\t} else {\n\t\t\t\tvalidColors.push(color);\n\t\t\t}\n\t\t});\n\t\treturn validColors;\n\t}\n\n\tsetMeasures() {\n\t\t// Override measures, including those for title and legend\n\t\t// set config for legend and title\n\t}\n\n\tconfigure() {\n\t\tlet height = this.argHeight;\n\t\tthis.baseHeight = height;\n\t\tthis.height = height - getExtraHeight(this.measures);\n\n\t\t// Bind window events\n\t\tthis.boundDrawFn = () => this.draw(true);\n\t\tif (ResizeObserver) {\n\t\t\tthis.resizeObserver = new ResizeObserver(this.boundDrawFn);\n\t\t\tthis.resizeObserver.observe(this.parent);\n\t\t}\n\t\twindow.addEventListener('resize', this.boundDrawFn);\n\t\twindow.addEventListener('orientationchange', this.boundDrawFn);\n\t}\n\n\tdestroy() {\n\t\tif (this.resizeObserver) this.resizeObserver.disconnect();\n\t\twindow.removeEventListener('resize', this.boundDrawFn);\n\t\twindow.removeEventListener('orientationchange', this.boundDrawFn);\n\t}\n\n\t// Has to be called manually\n\tsetup() {\n\t\tthis.makeContainer();\n\t\tthis.updateWidth();\n\t\tthis.makeTooltip();\n\n\t\tthis.draw(false, true);\n\t}\n\n\tmakeContainer() {\n\t\t// Chart needs a dedicated parent element\n\t\tthis.parent.innerHTML = '';\n\n\t\tlet args = {\n\t\t\tinside: this.parent,\n\t\t\tclassName: 'chart-container'\n\t\t};\n\n\t\tif(this.independentWidth) {\n\t\t\targs.styles = { width: this.independentWidth + 'px' };\n\t\t}\n\n\t\tthis.container = $.create('div', args);\n\t}\n\n\tmakeTooltip() {\n\t\tthis.tip = new SvgTip({\n\t\t\tparent: this.container,\n\t\t\tcolors: this.colors\n\t\t});\n\t\tthis.bindTooltip();\n\t}\n\n\tbindTooltip() {}\n\n\tdraw(onlyWidthChange=false, init=false) {\n\t\tif (onlyWidthChange && isHidden(this.parent)) {\n\t\t\t// Don't update anything if the chart is hidden\n\t\t\treturn;\n\t\t}\n\t\tthis.updateWidth();\n\n\t\tthis.calc(onlyWidthChange);\n\t\tthis.makeChartArea();\n\t\tthis.setupComponents();\n\n\t\tthis.components.forEach(c => c.setup(this.drawArea));\n\t\t// this.components.forEach(c => c.make());\n\t\tthis.render(this.components, false);\n\n\t\tif(init) {\n\t\t\tthis.data = this.realData;\n\t\t\tsetTimeout(() => {this.update(this.data);}, this.initTimeout);\n\t\t}\n\n\t\tthis.renderLegend();\n\n\t\tthis.setupNavigation(init);\n\t}\n\n\tcalc() {} // builds state\n\n\tupdateWidth() {\n\t\tthis.baseWidth = getElementContentWidth(this.parent);\n\t\tthis.width = this.baseWidth - getExtraWidth(this.measures);\n\t}\n\n\tmakeChartArea() {\n\t\tif(this.svg) {\n\t\t\tthis.container.removeChild(this.svg);\n\t\t}\n\t\tlet m = this.measures;\n\n\t\tthis.svg = makeSVGContainer(\n\t\t\tthis.container,\n\t\t\t'frappe-chart chart',\n\t\t\tthis.baseWidth,\n\t\t\tthis.baseHeight\n\t\t);\n\t\tthis.svgDefs = makeSVGDefs(this.svg);\n\n\t\tif(this.title.length) {\n\t\t\tthis.titleEL = makeText(\n\t\t\t\t'title',\n\t\t\t\tm.margins.left,\n\t\t\t\tm.margins.top,\n\t\t\t\tthis.title,\n\t\t\t\t{\n\t\t\t\t\tfontSize: m.titleFontSize,\n\t\t\t\t\tfill: '#666666',\n\t\t\t\t\tdy: m.titleFontSize\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tlet top = getTopOffset(m);\n\t\tthis.drawArea = makeSVGGroup(\n\t\t\tthis.type + '-chart chart-draw-area',\n\t\t\t`translate(${getLeftOffset(m)}, ${top})`\n\t\t);\n\n\t\tif(this.config.showLegend) {\n\t\t\ttop += this.height + m.paddings.bottom;\n\t\t\tthis.legendArea = makeSVGGroup(\n\t\t\t\t'chart-legend',\n\t\t\t\t`translate(${getLeftOffset(m)}, ${top})`\n\t\t\t);\n\t\t}\n\n\t\tif(this.title.length) { this.svg.appendChild(this.titleEL); }\n\t\tthis.svg.appendChild(this.drawArea);\n\t\tif(this.config.showLegend) { this.svg.appendChild(this.legendArea); }\n\n\t\tthis.updateTipOffset(getLeftOffset(m), getTopOffset(m));\n\t}\n\n\tupdateTipOffset(x, y) {\n\t\tthis.tip.offset = {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n\n\tsetupComponents() { this.components = new Map(); }\n\n\tupdate(data) {\n\t\tif(!data) {\n\t\t\tconsole.error('No data to update.');\n\t\t}\n\t\tthis.data = this.prepareData(data);\n\t\tthis.calc(); // builds state\n\t\tthis.render(this.components, this.config.animate);\n\t\tthis.renderLegend();\n\t}\n\n\trender(components=this.components, animate=true) {\n\t\tif(this.config.isNavigable) {\n\t\t\t// Remove all existing overlays\n\t\t\tthis.overlays.map(o => o.parentNode.removeChild(o));\n\t\t\t// ref.parentNode.insertBefore(element, ref);\n\t\t}\n\t\tlet elementsToAnimate = [];\n\t\t// Can decouple to this.refreshComponents() first to save animation timeout\n\t\tcomponents.forEach(c => {\n\t\t\telementsToAnimate = elementsToAnimate.concat(c.update(animate));\n\t\t});\n\t\tif(elementsToAnimate.length > 0) {\n\t\t\trunSMILAnimation(this.container, this.svg, elementsToAnimate);\n\t\t\tsetTimeout(() => {\n\t\t\t\tcomponents.forEach(c => c.make());\n\t\t\t\tthis.updateNav();\n\t\t\t}, CHART_POST_ANIMATE_TIMEOUT);\n\t\t} else {\n\t\t\tcomponents.forEach(c => c.make());\n\t\t\tthis.updateNav();\n\t\t}\n\t}\n\n\tupdateNav() {\n\t\tif(this.config.isNavigable) {\n\t\t\tthis.makeOverlay();\n\t\t\tthis.bindUnits();\n\t\t}\n\t}\n\n\trenderLegend() {}\n\n\tsetupNavigation(init=false) {\n\t\tif(!this.config.isNavigable) return;\n\n\t\tif(init) {\n\t\t\tthis.bindOverlay();\n\n\t\t\tthis.keyActions = {\n\t\t\t\t'13': this.onEnterKey.bind(this),\n\t\t\t\t'37': this.onLeftArrow.bind(this),\n\t\t\t\t'38': this.onUpArrow.bind(this),\n\t\t\t\t'39': this.onRightArrow.bind(this),\n\t\t\t\t'40': this.onDownArrow.bind(this),\n\t\t\t};\n\n\t\t\tdocument.addEventListener('keydown', (e) => {\n\t\t\t\tif(isElementInViewport(this.container)) {\n\t\t\t\t\te = e || window.event;\n\t\t\t\t\tif(this.keyActions[e.keyCode]) {\n\t\t\t\t\t\tthis.keyActions[e.keyCode]();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tmakeOverlay() {}\n\tupdateOverlay() {}\n\tbindOverlay() {}\n\tbindUnits() {}\n\n\tonLeftArrow() {}\n\tonRightArrow() {}\n\tonUpArrow() {}\n\tonDownArrow() {}\n\tonEnterKey() {}\n\n\taddDataPoint() {}\n\tremoveDataPoint() {}\n\n\tgetDataPoint() {}\n\tsetCurrentDataPoint() {}\n\n\tupdateDataset() {}\n\n\texport() {\n\t\tlet chartSvg = prepareForExport(this.svg);\n\t\tdownloadFile(this.title || 'Chart', [chartSvg]);\n\t}\n}\n", "import BaseChart from './BaseChart';\nimport { truncateString } from '../utils/draw-utils';\nimport { legendDot } from '../utils/draw';\nimport { round } from '../utils/helpers';\nimport { getExtraWidth } from '../utils/constants';\n\nexport default class AggregationChart extends BaseChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\n\t\tthis.config.formatTooltipY = (args.tooltipOptions || {}).formatTooltipY;\n\t\tthis.config.maxSlices = args.maxSlices || 20;\n\t\tthis.config.maxLegendPoints = args.maxLegendPoints || 20;\n\t}\n\n\tcalc() {\n\t\tlet s = this.state;\n\t\tlet maxSlices = this.config.maxSlices;\n\t\ts.sliceTotals = [];\n\n\t\tlet allTotals = this.data.labels.map((label, i) => {\n\t\t\tlet total = 0;\n\t\t\tthis.data.datasets.map(e => {\n\t\t\t\ttotal += e.values[i];\n\t\t\t});\n\t\t\treturn [total, label];\n\t\t}).filter(d => { return d[0] >= 0; }); // keep only positive results\n\n\t\tlet totals = allTotals;\n\t\tif(allTotals.length > maxSlices) {\n\t\t\t// Prune and keep a grey area for rest as per maxSlices\n\t\t\tallTotals.sort((a, b) => { return b[0] - a[0]; });\n\n\t\t\ttotals = allTotals.slice(0, maxSlices-1);\n\t\t\tlet remaining = allTotals.slice(maxSlices-1);\n\n\t\t\tlet sumOfRemaining = 0;\n\t\t\tremaining.map(d => {sumOfRemaining += d[0];});\n\t\t\ttotals.push([sumOfRemaining, 'Rest']);\n\t\t\tthis.colors[maxSlices-1] = 'grey';\n\t\t}\n\n\t\ts.labels = [];\n\t\ttotals.map(d => {\n\t\t\ts.sliceTotals.push(round(d[0]));\n\t\t\ts.labels.push(d[1]);\n\t\t});\n\n\t\ts.grandTotal = s.sliceTotals.reduce((a, b) => a + b, 0);\n\n\t\tthis.center = {\n\t\t\tx: this.width / 2,\n\t\t\ty: this.height / 2\n\t\t};\n\t}\n\n\trenderLegend() {\n\t\tlet s = this.state;\n\t\tthis.legendArea.textContent = '';\n\t\tthis.legendTotals = s.sliceTotals.slice(0, this.config.maxLegendPoints);\n\n\t\tlet count = 0;\n\t\tlet y = 0;\n\t\tthis.legendTotals.map((d, i) => {\n\t\t\tlet barWidth = 150;\n\t\t\tlet divisor = Math.floor(\n\t\t\t\t(this.width - getExtraWidth(this.measures))/barWidth\n\t\t\t);\n\t\t\tif (this.legendTotals.length < divisor) {\n\t\t\t\tbarWidth = this.width/this.legendTotals.length;\n\t\t\t}\n\t\t\tif(count > divisor) {\n\t\t\t\tcount = 0;\n\t\t\t\ty += 20;\n\t\t\t}\n\t\t\tlet x = barWidth * count + 5;\n\t\t\tlet label = this.config.truncateLegends ? truncateString(s.labels[i], barWidth/10) : s.labels[i];\n\t\t\tlet formatted = this.config.formatTooltipY ? this.config.formatTooltipY(d) : d;\n\t\t\tlet dot = legendDot(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\t5,\n\t\t\t\tthis.colors[i],\n\t\t\t\t`${label}: ${formatted}`,\n\t\t\t\tfalse\n\t\t\t);\n\t\t\tthis.legendArea.appendChild(dot);\n\t\t\tcount++;\n\t\t});\n\t}\n}\n", "import AggregationChart from './AggregationChart';\nimport { getOffset } from '../utils/dom';\nimport { getComponent } from '../objects/ChartComponents';\nimport { PERCENTAGE_BAR_DEFAULT_HEIGHT, PERCENTAGE_BAR_DEFAULT_DEPTH } from '../utils/constants';\n\nexport default class PercentageChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'percentage';\n\t\tthis.setup();\n\t}\n\n\tsetMeasures(options) {\n\t\tlet m = this.measures;\n\t\tthis.barOptions = options.barOptions || {};\n\n\t\tlet b = this.barOptions;\n\t\tb.height = b.height || PERCENTAGE_BAR_DEFAULT_HEIGHT;\n\t\tb.depth = b.depth || PERCENTAGE_BAR_DEFAULT_DEPTH;\n\n\t\tm.paddings.right = 30;\n\t\tm.legendHeight = 60;\n\t\tm.baseHeight = (b.height + b.depth * 0.5) * 8;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'percentageBars',\n\t\t\t\t{\n\t\t\t\t\tbarHeight: this.barOptions.height,\n\t\t\t\t\tbarDepth: this.barOptions.depth,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: s.xPositions,\n\t\t\t\t\t\twidths: s.widths,\n\t\t\t\t\t\tcolors: this.colors\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\n\t\ts.xPositions = [];\n\t\ts.widths = [];\n\n\t\tlet xPos = 0;\n\t\ts.sliceTotals.map((value) => {\n\t\t\tlet width = this.width * value / s.grandTotal;\n\t\t\ts.widths.push(width);\n\t\t\ts.xPositions.push(xPos);\n\t\t\txPos += width;\n\t\t});\n\t}\n\n\tmakeDataByIndex() { }\n\n\tbindTooltip() {\n\t\tlet s = this.state;\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tlet bars = this.components.get('percentageBars').store;\n\t\t\tlet bar = e.target;\n\t\t\tif(bars.includes(bar)) {\n\n\t\t\t\tlet i = bars.indexOf(bar);\n\t\t\t\tlet gOff = getOffset(this.container), pOff = getOffset(bar);\n\n\t\t\t\tlet x = pOff.left - gOff.left + parseInt(bar.getAttribute('width'))/2;\n\t\t\t\tlet y = pOff.top - gOff.top;\n\t\t\t\tlet title = (this.formattedLabels && this.formattedLabels.length>0\n\t\t\t\t\t? this.formattedLabels[i] : this.state.labels[i]) + ': ';\n\t\t\t\tlet fraction = s.sliceTotals[i]/s.grandTotal;\n\n\t\t\t\tthis.tip.setValues(x, y, {name: title, value: (fraction*100).toFixed(1) + \"%\"});\n\t\t\t\tthis.tip.showTip();\n\t\t\t}\n\t\t});\n\t}\n}\n", "import AggregationChart from './AggregationChart';\nimport { getComponent } from '../objects/ChartComponents';\nimport { getOffset } from '../utils/dom';\nimport { getPositionByAngle } from '../utils/helpers';\nimport { makeArcPathStr, makeCircleStr } from '../utils/draw';\nimport { lightenDarkenColor } from '../utils/colors';\nimport { transform } from '../utils/animation';\nimport { FULL_ANGLE } from '../utils/constants';\n\nexport default class PieChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'pie';\n\t\tthis.initTimeout = 0;\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\t\tthis.mouseMove = this.mouseMove.bind(this);\n\t\tthis.mouseLeave = this.mouseLeave.bind(this);\n\n\t\tthis.hoverRadio = args.hoverRadio || 0.1;\n\t\tthis.config.startAngle = args.startAngle || 0;\n\n\t\tthis.clockWise = args.clockWise || false;\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\t\tthis.radius = (this.height > this.width ? this.center.x : this.center.y);\n\n\t\tconst { radius, clockWise } = this;\n\n\t\tconst prevSlicesProperties = s.slicesProperties || [];\n\t\ts.sliceStrings = [];\n\t\ts.slicesProperties = [];\n\t\tlet curAngle = 180 - this.config.startAngle;\n\t\ts.sliceTotals.map((total, i) => {\n\t\t\tconst startAngle = curAngle;\n\t\t\tconst originDiffAngle = (total / s.grandTotal) * FULL_ANGLE;\n\t\t\tconst largeArc = originDiffAngle > 180 ? 1: 0;\n\t\t\tconst diffAngle = clockWise ? -originDiffAngle : originDiffAngle;\n\t\t\tconst endAngle = curAngle = curAngle + diffAngle;\n\t\t\tconst startPosition = getPositionByAngle(startAngle, radius);\n\t\t\tconst endPosition = getPositionByAngle(endAngle, radius);\n\n\t\t\tconst prevProperty = this.init && prevSlicesProperties[i];\n\n\t\t\tlet curStart,curEnd;\n\t\t\tif(this.init) {\n\t\t\t\tcurStart = prevProperty ? prevProperty.startPosition : startPosition;\n\t\t\t\tcurEnd = prevProperty ? prevProperty.endPosition : startPosition;\n\t\t\t} else {\n\t\t\t\tcurStart = startPosition;\n\t\t\t\tcurEnd = endPosition;\n\t\t\t}\n\t\t\tconst curPath =\n\t\t\t\toriginDiffAngle === 360\n\t\t\t\t\t? makeCircleStr(curStart, curEnd, this.center, this.radius, clockWise, largeArc)\n\t\t\t\t\t: makeArcPathStr(curStart, curEnd, this.center, this.radius, clockWise, largeArc);\n\n\t\t\ts.sliceStrings.push(curPath);\n\t\t\ts.slicesProperties.push({\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition,\n\t\t\t\tvalue: total,\n\t\t\t\ttotal: s.grandTotal,\n\t\t\t\tstartAngle,\n\t\t\t\tendAngle,\n\t\t\t\tangle: diffAngle\n\t\t\t});\n\n\t\t});\n\t\tthis.init = 0;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'pieSlices',\n\t\t\t\t{ },\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsliceStrings: s.sliceStrings,\n\t\t\t\t\t\tcolors: this.colors\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalTranslateByAngle(property){\n\t\tconst{radius,hoverRadio} = this;\n\t\tconst position = getPositionByAngle(property.startAngle+(property.angle / 2),radius);\n\t\treturn `translate3d(${(position.x) * hoverRadio}px,${(position.y) * hoverRadio}px,0)`;\n\t}\n\n\thoverSlice(path,i,flag,e){\n\t\tif(!path) return;\n\t\tconst color = this.colors[i];\n\t\tif(flag) {\n\t\t\ttransform(path, this.calTranslateByAngle(this.state.slicesProperties[i]));\n\t\t\tpath.style.fill = lightenDarkenColor(color, 50);\n\t\t\tlet g_off = getOffset(this.svg);\n\t\t\tlet x = e.pageX - g_off.left + 10;\n\t\t\tlet y = e.pageY - g_off.top - 10;\n\t\t\tlet title = (this.formatted_labels && this.formatted_labels.length > 0\n\t\t\t\t? this.formatted_labels[i] : this.state.labels[i]) + ': ';\n\t\t\tlet percent = (this.state.sliceTotals[i] * 100 / this.state.grandTotal).toFixed(1);\n\t\t\tthis.tip.setValues(x, y, {name: title, value: percent + \"%\"});\n\t\t\tthis.tip.showTip();\n\t\t} else {\n\t\t\ttransform(path,'translate3d(0,0,0)');\n\t\t\tthis.tip.hideTip();\n\t\t\tpath.style.fill = color;\n\t\t}\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', this.mouseMove);\n\t\tthis.container.addEventListener('mouseleave', this.mouseLeave);\n\t}\n\n\tmouseMove(e){\n\t\tconst target = e.target;\n\t\tlet slices = this.components.get('pieSlices').store;\n\t\tlet prevIndex = this.curActiveSliceIndex;\n\t\tlet prevAcitve = this.curActiveSlice;\n\t\tif(slices.includes(target)) {\n\t\t\tlet i = slices.indexOf(target);\n\t\t\tthis.hoverSlice(prevAcitve, prevIndex,false);\n\t\t\tthis.curActiveSlice = target;\n\t\t\tthis.curActiveSliceIndex = i;\n\t\t\tthis.hoverSlice(target, i, true, e);\n\t\t} else {\n\t\t\tthis.mouseLeave();\n\t\t}\n\t}\n\n\tmouseLeave(){\n\t\tthis.hoverSlice(this.curActiveSlice,this.curActiveSliceIndex,false);\n\t}\n}\n", "import BaseChart from './BaseChart';\nimport { getComponent } from '../objects/ChartComponents';\nimport { makeText, heatSquare } from '../utils/draw';\nimport { DAY_NAMES_SHORT, addDays, areInSameMonth, getLastDateInMonth, setDayToSunday, getYyyyMmDd, getWeeksBetween, getMonthName, clone,\n\tNO_OF_MILLIS, NO_OF_YEAR_MONTHS, NO_OF_DAYS_IN_WEEK } from '../utils/date-utils';\nimport { calcDistribution, getMaxCheckpoint } from '../utils/intervals';\nimport { getExtraHeight, getExtraWidth, HEATMAP_DISTRIBUTION_SIZE, HEATMAP_SQUARE_SIZE,\n\tHEATMAP_GUTTER_SIZE } from '../utils/constants';\n\nconst COL_WIDTH = HEATMAP_SQUARE_SIZE + HEATMAP_GUTTER_SIZE;\nconst ROW_HEIGHT = COL_WIDTH;\n// const DAY_INCR = 1;\n\nexport default class Heatmap extends BaseChart {\n\tconstructor(parent, options) {\n\t\tsuper(parent, options);\n\t\tthis.type = 'heatmap';\n\n\t\tthis.countLabel = options.countLabel || '';\n\n\t\tlet validStarts = ['Sunday', 'Monday'];\n\t\tlet startSubDomain = validStarts.includes(options.startSubDomain)\n\t\t\t? options.startSubDomain : 'Sunday';\n\t\tthis.startSubDomainIndex = validStarts.indexOf(startSubDomain);\n\n\t\tthis.setup();\n\t}\n\n\tsetMeasures(options) {\n\t\tlet m = this.measures;\n\t\tthis.discreteDomains = options.discreteDomains === 0 ? 0 : 1;\n\n\t\tm.paddings.top = ROW_HEIGHT * 3;\n\t\tm.paddings.bottom = 0;\n\t\tm.legendHeight = ROW_HEIGHT * 2;\n\t\tm.baseHeight = ROW_HEIGHT * NO_OF_DAYS_IN_WEEK\n\t\t\t+ getExtraHeight(m);\n\n\t\tlet d = this.data;\n\t\tlet spacing = this.discreteDomains ? NO_OF_YEAR_MONTHS : 0;\n\t\tthis.independentWidth = (getWeeksBetween(d.start, d.end)\n\t\t\t+ spacing) * COL_WIDTH + getExtraWidth(m);\n\t}\n\n\tupdateWidth() {\n\t\tlet spacing = this.discreteDomains ? NO_OF_YEAR_MONTHS : 0;\n\t\tlet noOfWeeks = this.state.noOfWeeks ? this.state.noOfWeeks : 52;\n\t\tthis.baseWidth = (noOfWeeks + spacing) * COL_WIDTH\n\t\t\t+ getExtraWidth(this.measures);\n\t}\n\n\tprepareData(data=this.data) {\n\t\tif(data.start && data.end && data.start > data.end) {\n\t\t\tthrow new Error('Start date cannot be greater than end date.');\n\t\t}\n\n\t\tif(!data.start) {\n\t\t\tdata.start = new Date();\n\t\t\tdata.start.setFullYear( data.start.getFullYear() - 1 );\n\t\t}\n\t\tif(!data.end) { data.end = new Date(); }\n\t\tdata.dataPoints = data.dataPoints || {};\n\n\t\tif(parseInt(Object.keys(data.dataPoints)[0]) > 100000) {\n\t\t\tlet points = {};\n\t\t\tObject.keys(data.dataPoints).forEach(timestampSec => {\n\t\t\t\tlet date = new Date(timestampSec * NO_OF_MILLIS);\n\t\t\t\tpoints[getYyyyMmDd(date)] = data.dataPoints[timestampSec];\n\t\t\t});\n\t\t\tdata.dataPoints = points;\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tcalc() {\n\t\tlet s = this.state;\n\n\t\ts.start = clone(this.data.start);\n\t\ts.end = clone(this.data.end);\n\n\t\ts.firstWeekStart = clone(s.start);\n\t\ts.noOfWeeks = getWeeksBetween(s.start, s.end);\n\t\ts.distribution = calcDistribution(\n\t\t\tObject.values(this.data.dataPoints), HEATMAP_DISTRIBUTION_SIZE);\n\n\t\ts.domainConfigs = this.getDomains();\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\t\tlet lessCol = this.discreteDomains ? 0 : 1;\n\n\t\tlet componentConfigs = s.domainConfigs.map((config, i) => [\n\t\t\t'heatDomain',\n\t\t\t{\n\t\t\t\tindex: config.index,\n\t\t\t\tcolWidth: COL_WIDTH,\n\t\t\t\trowHeight: ROW_HEIGHT,\n\t\t\t\tsquareSize: HEATMAP_SQUARE_SIZE,\n\t\t\t\tradius: this.rawChartArgs.radius || 0,\n\t\t\t\txTranslate: s.domainConfigs\n\t\t\t\t\t.filter((config, j) => j < i)\n\t\t\t\t\t.map(config => config.cols.length - lessCol)\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t\t\t* COL_WIDTH\n\t\t\t},\n\t\t\tfunction() {\n\t\t\t\treturn s.domainConfigs[i];\n\t\t\t}.bind(this)\n\n\t\t]);\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map((args, i) => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0] + '-' + i, component];\n\t\t\t})\n\t\t);\n\n\t\tlet y = 0;\n\t\tDAY_NAMES_SHORT.forEach((dayName, i) => {\n\t\t\tif([1, 3, 5].includes(i)) {\n\t\t\t\tlet dayText = makeText('subdomain-name', -COL_WIDTH/2, y, dayName,\n\t\t\t\t\t{\n\t\t\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE,\n\t\t\t\t\t\tdy: 8,\n\t\t\t\t\t\ttextAnchor: 'end'\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tthis.drawArea.appendChild(dayText);\n\t\t\t}\n\t\t\ty += ROW_HEIGHT;\n\t\t});\n\t}\n\n\tupdate(data) {\n\t\tif(!data) {\n\t\t\tconsole.error('No data to update.');\n\t\t}\n\n\t\tthis.data = this.prepareData(data);\n\t\tthis.draw();\n\t\tthis.bindTooltip();\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tthis.components.forEach(comp => {\n\t\t\t\tlet daySquares = comp.store;\n\t\t\t\tlet daySquare = e.target;\n\t\t\t\tif(daySquares.includes(daySquare)) {\n\n\t\t\t\t\tlet count = daySquare.getAttribute('data-value');\n\t\t\t\t\tlet dateParts = daySquare.getAttribute('data-date').split('-');\n\n\t\t\t\t\tlet month = getMonthName(parseInt(dateParts[1])-1, true);\n\n\t\t\t\t\tlet gOff = this.container.getBoundingClientRect(), pOff = daySquare.getBoundingClientRect();\n\n\t\t\t\t\tlet width = parseInt(e.target.getAttribute('width'));\n\t\t\t\t\tlet x = pOff.left - gOff.left + width/2;\n\t\t\t\t\tlet y = pOff.top - gOff.top;\n\t\t\t\t\tlet value = count + ' ' + this.countLabel;\n\t\t\t\t\tlet name = ' on ' + month + ' ' + dateParts[0] + ', ' + dateParts[2];\n\n\t\t\t\t\tthis.tip.setValues(x, y, {name: name, value: value, valueFirst: 1}, []);\n\t\t\t\t\tthis.tip.showTip();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\trenderLegend() {\n\t\tthis.legendArea.textContent = '';\n\t\tlet x = 0;\n\t\tlet y = ROW_HEIGHT;\n\t\tlet radius = this.rawChartArgs.radius || 0;\n\n\t\tlet lessText = makeText('subdomain-name', x, y, 'Less',\n\t\t\t{\n\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE + 1,\n\t\t\t\tdy: 9\n\t\t\t}\n\t\t);\n\t\tx = (COL_WIDTH * 2) + COL_WIDTH/2;\n\t\tthis.legendArea.appendChild(lessText);\n\n\t\tthis.colors.slice(0, HEATMAP_DISTRIBUTION_SIZE).map((color, i) => {\n\t\t\tconst square = heatSquare('heatmap-legend-unit', x + (COL_WIDTH + 3) * i,\n\t\t\t\ty, HEATMAP_SQUARE_SIZE, radius, color);\n\t\t\tthis.legendArea.appendChild(square);\n\t\t});\n\n\t\tlet moreTextX = x + HEATMAP_DISTRIBUTION_SIZE * (COL_WIDTH + 3) + COL_WIDTH/4;\n\t\tlet moreText = makeText('subdomain-name', moreTextX, y, 'More',\n\t\t\t{\n\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE + 1,\n\t\t\t\tdy: 9\n\t\t\t}\n\t\t);\n\t\tthis.legendArea.appendChild(moreText);\n\t}\n\n\tgetDomains() {\n\t\tlet s = this.state;\n\t\tconst [startMonth, startYear] = [s.start.getMonth(), s.start.getFullYear()];\n\t\tconst [endMonth, endYear] = [s.end.getMonth(), s.end.getFullYear()];\n\n\t\tconst noOfMonths = (endMonth - startMonth + 1) + (endYear - startYear) * 12;\n\n\t\tlet domainConfigs = [];\n\n\t\tlet startOfMonth = clone(s.start);\n\t\tfor(var i = 0; i < noOfMonths; i++) {\n\t\t\tlet endDate = s.end;\n\t\t\tif(!areInSameMonth(startOfMonth, s.end)) {\n\t\t\t\tlet [month, year] = [startOfMonth.getMonth(), startOfMonth.getFullYear()];\n\t\t\t\tendDate = getLastDateInMonth(month, year);\n\t\t\t}\n\t\t\tdomainConfigs.push(this.getDomainConfig(startOfMonth, endDate));\n\n\t\t\taddDays(endDate, 1);\n\t\t\tstartOfMonth = endDate;\n\t\t}\n\n\t\treturn domainConfigs;\n\t}\n\n\tgetDomainConfig(startDate, endDate='') {\n\t\tlet [month, year] = [startDate.getMonth(), startDate.getFullYear()];\n\t\tlet startOfWeek = setDayToSunday(startDate); // TODO: Monday as well\n\t\tendDate = clone(endDate) || getLastDateInMonth(month, year);\n\n\t\tlet domainConfig = {\n\t\t\tindex: month,\n\t\t\tcols: []\n\t\t};\n\n\t\taddDays(endDate, 1);\n\t\tlet noOfMonthWeeks = getWeeksBetween(startOfWeek, endDate);\n\n\t\tlet cols = [], col;\n\t\tfor(var i = 0; i < noOfMonthWeeks; i++) {\n\t\t\tcol = this.getCol(startOfWeek, month);\n\t\t\tcols.push(col);\n\n\t\t\tstartOfWeek = new Date(col[NO_OF_DAYS_IN_WEEK - 1].yyyyMmDd);\n\t\t\taddDays(startOfWeek, 1);\n\t\t}\n\n\t\tif(col[NO_OF_DAYS_IN_WEEK - 1].dataValue !== undefined) {\n\t\t\taddDays(startOfWeek, 1);\n\t\t\tcols.push(this.getCol(startOfWeek, month, true));\n\t\t}\n\n\t\tdomainConfig.cols = cols;\n\n\t\treturn domainConfig;\n\t}\n\n\tgetCol(startDate, month, empty = false) {\n\t\tlet s = this.state;\n\n\t\t// startDate is the start of week\n\t\tlet currentDate = clone(startDate);\n\t\tlet col = [];\n\n\t\tfor(var i = 0; i < NO_OF_DAYS_IN_WEEK; i++, addDays(currentDate, 1)) {\n\t\t\tlet config = {};\n\n\t\t\t// Non-generic adjustment for entire heatmap, needs state\n\t\t\tlet currentDateWithinData = currentDate >= s.start && currentDate <= s.end;\n\n\t\t\tif(empty || currentDate.getMonth() !== month || !currentDateWithinData) {\n\t\t\t\tconfig.yyyyMmDd = getYyyyMmDd(currentDate);\n\t\t\t} else {\n\t\t\t\tconfig = this.getSubDomainConfig(currentDate);\n\t\t\t}\n\t\t\tcol.push(config);\n\t\t}\n\n\t\treturn col;\n\t}\n\n\tgetSubDomainConfig(date) {\n\t\tlet yyyyMmDd = getYyyyMmDd(date);\n\t\tlet dataValue = this.data.dataPoints[yyyyMmDd];\n\t\tlet config = {\n\t\t\tyyyyMmDd: yyyyMmDd,\n\t\t\tdataValue: dataValue || 0,\n\t\t\tfill: this.colors[getMaxCheckpoint(dataValue, this.state.distribution)]\n\t\t};\n\t\treturn config;\n\t}\n}\n", "import BaseChart from './BaseChart';\nimport { dataPrep, zeroDataPrep, getShortenedLabels } from '../utils/axis-chart-utils';\nimport { AXIS_LEGEND_BAR_SIZE } from '../utils/constants';\nimport { getComponent } from '../objects/ChartComponents';\nimport { getOffset, fire } from '../utils/dom';\nimport { calcChartIntervals, getIntervalSize, getValueRange, getZeroIndex, scale, getClosestInArray } from '../utils/intervals';\nimport { floatTwo } from '../utils/helpers';\nimport { makeOverlay, updateOverlay, legendBar } from '../utils/draw';\nimport { getTopOffset, getLeftOffset, MIN_BAR_PERCENT_HEIGHT, BAR_CHART_SPACE_RATIO,\n\tLINE_CHART_DOT_SIZE } from '../utils/constants';\n\nexport default class AxisChart extends BaseChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\n\t\tthis.barOptions = args.barOptions || {};\n\t\tthis.lineOptions = args.lineOptions || {};\n\n\t\tthis.type = args.type || 'line';\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tsetMeasures() {\n\t\tif(this.data.datasets.length <= 1) {\n\t\t\tthis.config.showLegend = 0;\n\t\t\tthis.measures.paddings.bottom = 30;\n\t\t}\n\t}\n\n\tconfigure(options) {\n\t\tsuper.configure(options);\n\n\t\toptions.axisOptions = options.axisOptions || {};\n\t\toptions.tooltipOptions = options.tooltipOptions || {};\n\n\t\tthis.config.xAxisMode = options.axisOptions.xAxisMode || 'span';\n\t\tthis.config.yAxisMode = options.axisOptions.yAxisMode || 'span';\n\t\tthis.config.xIsSeries = options.axisOptions.xIsSeries || 0;\n\t\tthis.config.shortenYAxisNumbers = options.axisOptions.shortenYAxisNumbers || 0;\n\n\t\tthis.config.formatTooltipX = options.tooltipOptions.formatTooltipX;\n\t\tthis.config.formatTooltipY = options.tooltipOptions.formatTooltipY;\n\n\t\tthis.config.valuesOverPoints = options.valuesOverPoints;\n\t}\n\n\tprepareData(data=this.data) {\n\t\treturn dataPrep(data, this.type);\n\t}\n\n\tprepareFirstData(data=this.data) {\n\t\treturn zeroDataPrep(data);\n\t}\n\n\tcalc(onlyWidthChange = false) {\n\t\tthis.calcXPositions();\n\t\tif(!onlyWidthChange) {\n\t\t\tthis.calcYAxisParameters(this.getAllYValues(), this.type === 'line');\n\t\t}\n\t\tthis.makeDataByIndex();\n\t}\n\n\tcalcXPositions() {\n\t\tlet s = this.state;\n\t\tlet labels = this.data.labels;\n\t\ts.datasetLength = labels.length;\n\n\t\ts.unitWidth = this.width/(s.datasetLength);\n\t\t// Default, as per bar, and mixed. Only line will be a special case\n\t\ts.xOffset = s.unitWidth/2;\n\n\t\t// // For a pure Line Chart\n\t\t// s.unitWidth = this.width/(s.datasetLength - 1);\n\t\t// s.xOffset = 0;\n\n\t\ts.xAxis = {\n\t\t\tlabels: labels,\n\t\t\tpositions: labels.map((d, i) =>\n\t\t\t\tfloatTwo(s.xOffset + i * s.unitWidth)\n\t\t\t)\n\t\t};\n\t}\n\n\tcalcYAxisParameters(dataValues, withMinimum = 'false') {\n\t\tconst yPts = calcChartIntervals(dataValues, withMinimum);\n\t\tconst scaleMultiplier = this.height / getValueRange(yPts);\n\t\tconst intervalHeight = getIntervalSize(yPts) * scaleMultiplier;\n\t\tconst zeroLine = this.height - (getZeroIndex(yPts) * intervalHeight);\n\n\t\tthis.state.yAxis = {\n\t\t\tlabels: yPts,\n\t\t\tpositions: yPts.map(d => zeroLine - d * scaleMultiplier),\n\t\t\tscaleMultiplier: scaleMultiplier,\n\t\t\tzeroLine: zeroLine,\n\t\t};\n\n\t\t// Dependent if above changes\n\t\tthis.calcDatasetPoints();\n\t\tthis.calcYExtremes();\n\t\tthis.calcYRegions();\n\t}\n\n\tcalcDatasetPoints() {\n\t\tlet s = this.state;\n\t\tlet scaleAll = values => values.map(val => scale(val, s.yAxis));\n\n\t\ts.datasets = this.data.datasets.map((d, i) => {\n\t\t\tlet values = d.values;\n\t\t\tlet cumulativeYs = d.cumulativeYs || [];\n\t\t\treturn {\n\t\t\t\tname: d.name && d.name.replace(/<|>|&/g, (char) => char == '&' ? '&amp;' : char == '<' ? '&lt;' : '&gt;'),\n\t\t\t\tindex: i,\n\t\t\t\tchartType: d.chartType,\n\n\t\t\t\tvalues: values,\n\t\t\t\tyPositions: scaleAll(values),\n\n\t\t\t\tcumulativeYs: cumulativeYs,\n\t\t\t\tcumulativeYPos: scaleAll(cumulativeYs),\n\t\t\t};\n\t\t});\n\t}\n\n\tcalcYExtremes() {\n\t\tlet s = this.state;\n\t\tif(this.barOptions.stacked) {\n\t\t\ts.yExtremes = s.datasets[s.datasets.length - 1].cumulativeYPos;\n\t\t\treturn;\n\t\t}\n\t\ts.yExtremes = new Array(s.datasetLength).fill(9999);\n\t\ts.datasets.map(d => {\n\t\t\td.yPositions.map((pos, j) => {\n\t\t\t\tif(pos < s.yExtremes[j]) {\n\t\t\t\t\ts.yExtremes[j] = pos;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcalcYRegions() {\n\t\tlet s = this.state;\n\t\tif(this.data.yMarkers) {\n\t\t\tthis.state.yMarkers = this.data.yMarkers.map(d => {\n\t\t\t\td.position = scale(d.value, s.yAxis);\n\t\t\t\tif(!d.options) d.options = {};\n\t\t\t\t// if(!d.label.includes(':')) {\n\t\t\t\t// \td.label += ': ' + d.value;\n\t\t\t\t// }\n\t\t\t\treturn d;\n\t\t\t});\n\t\t}\n\t\tif(this.data.yRegions) {\n\t\t\tthis.state.yRegions = this.data.yRegions.map(d => {\n\t\t\t\td.startPos = scale(d.start, s.yAxis);\n\t\t\t\td.endPos = scale(d.end, s.yAxis);\n\t\t\t\tif(!d.options) d.options = {};\n\t\t\t\treturn d;\n\t\t\t});\n\t\t}\n\t}\n\n\tgetAllYValues() {\n\t\tlet key = 'values';\n\n\t\tif(this.barOptions.stacked) {\n\t\t\tkey = 'cumulativeYs';\n\t\t\tlet cumulative = new Array(this.state.datasetLength).fill(0);\n\t\t\tthis.data.datasets.map((d, i) => {\n\t\t\t\tlet values = this.data.datasets[i].values;\n\t\t\t\td[key] = cumulative = cumulative.map((c, i) => c + values[i]);\n\t\t\t});\n\t\t}\n\n\t\tlet allValueLists = this.data.datasets.map(d => d[key]);\n\t\tif(this.data.yMarkers) {\n\t\t\tallValueLists.push(this.data.yMarkers.map(d => d.value));\n\t\t}\n\t\tif(this.data.yRegions) {\n\t\t\tthis.data.yRegions.map(d => {\n\t\t\t\tallValueLists.push([d.end, d.start]);\n\t\t\t});\n\t\t}\n\n\t\treturn [].concat(...allValueLists);\n\t}\n\n\tsetupComponents() {\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'yAxis',\n\t\t\t\t{\n\t\t\t\t\tmode: this.config.yAxisMode,\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tshortenNumbers: this.config.shortenYAxisNumbers\n\t\t\t\t\t// pos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yAxis;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t'xAxis',\n\t\t\t\t{\n\t\t\t\t\tmode: this.config.xAxisMode,\n\t\t\t\t\theight: this.height,\n\t\t\t\t\t// pos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\ts.xAxis.calcLabels = getShortenedLabels(this.width,\n\t\t\t\t\t\ts.xAxis.labels, this.config.xIsSeries);\n\n\t\t\t\t\treturn s.xAxis;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t'yRegions',\n\t\t\t\t{\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tpos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yRegions;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\t\t];\n\n\t\tlet barDatasets = this.state.datasets.filter(d => d.chartType === 'bar');\n\t\tlet lineDatasets = this.state.datasets.filter(d => d.chartType === 'line');\n\n\t\tlet barsConfigs = barDatasets.map(d => {\n\t\t\tlet index = d.index;\n\t\t\treturn [\n\t\t\t\t'barGraph' + '-' + d.index,\n\t\t\t\t{\n\t\t\t\t\tindex: index,\n\t\t\t\t\tcolor: this.colors[index],\n\t\t\t\t\tstacked: this.barOptions.stacked,\n\n\t\t\t\t\t// same for all datasets\n\t\t\t\t\tvaluesOverPoints: this.config.valuesOverPoints,\n\t\t\t\t\tminHeight: this.height * MIN_BAR_PERCENT_HEIGHT,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\tlet d = s.datasets[index];\n\t\t\t\t\tlet stacked = this.barOptions.stacked;\n\n\t\t\t\t\tlet spaceRatio = this.barOptions.spaceRatio || BAR_CHART_SPACE_RATIO;\n\t\t\t\t\tlet barsWidth = s.unitWidth * (1 - spaceRatio);\n\t\t\t\t\tlet barWidth = barsWidth/(stacked ? 1 : barDatasets.length);\n\n\t\t\t\t\tlet xPositions = s.xAxis.positions.map(x => x - barsWidth/2);\n\t\t\t\t\tif(!stacked) {\n\t\t\t\t\t\txPositions = xPositions.map(p => p + barWidth * index);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet labels = new Array(s.datasetLength).fill('');\n\t\t\t\t\tif(this.config.valuesOverPoints) {\n\t\t\t\t\t\tif(stacked && d.index === s.datasets.length - 1) {\n\t\t\t\t\t\t\tlabels = d.cumulativeYs;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlabels = d.values;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet offsets = new Array(s.datasetLength).fill(0);\n\t\t\t\t\tif(stacked) {\n\t\t\t\t\t\toffsets = d.yPositions.map((y, j) => y - d.cumulativeYPos[j]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: xPositions,\n\t\t\t\t\t\tyPositions: d.yPositions,\n\t\t\t\t\t\toffsets: offsets,\n\t\t\t\t\t\t// values: d.values,\n\t\t\t\t\t\tlabels: labels,\n\n\t\t\t\t\t\tzeroLine: s.yAxis.zeroLine,\n\t\t\t\t\t\tbarsWidth: barsWidth,\n\t\t\t\t\t\tbarWidth: barWidth,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t];\n\t\t});\n\n\t\tlet lineConfigs = lineDatasets.map(d => {\n\t\t\tlet index = d.index;\n\t\t\treturn [\n\t\t\t\t'lineGraph' + '-' + d.index,\n\t\t\t\t{\n\t\t\t\t\tindex: index,\n\t\t\t\t\tcolor: this.colors[index],\n\t\t\t\t\tsvgDefs: this.svgDefs,\n\t\t\t\t\theatline: this.lineOptions.heatline,\n\t\t\t\t\tregionFill: this.lineOptions.regionFill,\n\t\t\t\t\tspline: this.lineOptions.spline,\n\t\t\t\t\thideDots: this.lineOptions.hideDots,\n\t\t\t\t\thideLine: this.lineOptions.hideLine,\n\n\t\t\t\t\t// same for all datasets\n\t\t\t\t\tvaluesOverPoints: this.config.valuesOverPoints,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\tlet d = s.datasets[index];\n\t\t\t\t\tlet minLine = s.yAxis.positions[0] < s.yAxis.zeroLine\n\t\t\t\t\t\t? s.yAxis.positions[0] : s.yAxis.zeroLine;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: s.xAxis.positions,\n\t\t\t\t\t\tyPositions: d.yPositions,\n\n\t\t\t\t\t\tvalues: d.values,\n\n\t\t\t\t\t\tzeroLine: minLine,\n\t\t\t\t\t\tradius: this.lineOptions.dotSize || LINE_CHART_DOT_SIZE,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t];\n\t\t});\n\n\t\tlet markerConfigs = [\n\t\t\t[\n\t\t\t\t'yMarkers',\n\t\t\t\t{\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tpos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yMarkers;\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tcomponentConfigs = componentConfigs.concat(barsConfigs, lineConfigs, markerConfigs);\n\n\t\tlet optionals = ['yMarkers', 'yRegions'];\n\t\tthis.dataUnitComponents = [];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.filter(args => !optionals.includes(args[0]) || this.state[args[0]])\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\tif(args[0].includes('lineGraph') || args[0].includes('barGraph')) {\n\t\t\t\t\tthis.dataUnitComponents.push(component);\n\t\t\t\t}\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tmakeDataByIndex() {\n\t\tthis.dataByIndex = {};\n\n\t\tlet s = this.state;\n\t\tlet formatX = this.config.formatTooltipX;\n\t\tlet formatY = this.config.formatTooltipY;\n\t\tlet titles = s.xAxis.labels;\n\n\t\ttitles.map((label, index) => {\n\t\t\tlet values = this.state.datasets.map((set, i) => {\n\t\t\t\tlet value = set.values[index];\n\t\t\t\treturn {\n\t\t\t\t\ttitle: set.name,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tyPos: set.yPositions[index],\n\t\t\t\t\tcolor: this.colors[i],\n\t\t\t\t\tformatted: formatY ? formatY(value) : value,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tthis.dataByIndex[index] = {\n\t\t\t\tlabel: label,\n\t\t\t\tformattedLabel: formatX ? formatX(label) : label,\n\t\t\t\txPos: s.xAxis.positions[index],\n\t\t\t\tvalues: values,\n\t\t\t\tyExtreme: s.yExtremes[index],\n\t\t\t};\n\t\t});\n\t}\n\n\tbindTooltip() {\n\t\t// NOTE: could be in tooltip itself, as it is a given functionality for its parent\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tlet m = this.measures;\n\t\t\tlet o = getOffset(this.container);\n\t\t\tlet relX = e.pageX - o.left - getLeftOffset(m);\n\t\t\tlet relY = e.pageY - o.top;\n\n\t\t\tif(relY < this.height + getTopOffset(m)\n\t\t\t\t&& relY >  getTopOffset(m)) {\n\t\t\t\tthis.mapTooltipXPosition(relX);\n\t\t\t} else {\n\t\t\t\tthis.tip.hideTip();\n\t\t\t}\n\t\t});\n\t}\n\n\tmapTooltipXPosition(relX) {\n\t\tlet s = this.state;\n\t\tif(!s.yExtremes) return;\n\n\t\tlet index = getClosestInArray(relX, s.xAxis.positions, true);\n\t\tif (index >= 0) {\n\t\t\tlet dbi = this.dataByIndex[index];\n\n\t\t\tthis.tip.setValues(\n\t\t\t\tdbi.xPos + this.tip.offset.x,\n\t\t\t\tdbi.yExtreme + this.tip.offset.y,\n\t\t\t\t{name: dbi.formattedLabel, value: ''},\n\t\t\t\tdbi.values,\n\t\t\t\tindex\n\t\t\t);\n\n\t\t\tthis.tip.showTip();\n\t\t}\n\t}\n\n\trenderLegend() {\n\t\tlet s = this.data;\n\t\tif(s.datasets.length > 1) {\n\t\t\tthis.legendArea.textContent = '';\n\t\t\ts.datasets.map((d, i) => {\n\t\t\t\tlet barWidth = AXIS_LEGEND_BAR_SIZE;\n\t\t\t\t// let rightEndPoint = this.baseWidth - this.measures.margins.left - this.measures.margins.right;\n\t\t\t\t// let multiplier = s.datasets.length - i;\n\t\t\t\tlet rect = legendBar(\n\t\t\t\t\t// rightEndPoint - multiplier * barWidth,\t// To right align\n\t\t\t\t\tbarWidth * i,\n\t\t\t\t\t'0',\n\t\t\t\t\tbarWidth,\n\t\t\t\t\tthis.colors[i],\n\t\t\t\t\td.name,\n\t\t\t\t\tthis.config.truncateLegends);\n\t\t\t\tthis.legendArea.appendChild(rect);\n\t\t\t});\n\t\t}\n\t}\n\n\n\n\t// Overlay\n\tmakeOverlay() {\n\t\tif(this.init) {\n\t\t\tthis.init = 0;\n\t\t\treturn;\n\t\t}\n\t\tif(this.overlayGuides) {\n\t\t\tthis.overlayGuides.forEach(g => {\n\t\t\t\tlet o = g.overlay;\n\t\t\t\to.parentNode.removeChild(o);\n\t\t\t});\n\t\t}\n\n\t\tthis.overlayGuides = this.dataUnitComponents.map(c => {\n\t\t\treturn {\n\t\t\t\ttype: c.unitType,\n\t\t\t\toverlay: undefined,\n\t\t\t\tunits: c.units,\n\t\t\t};\n\t\t});\n\n\t\tif(this.state.currentIndex === undefined) {\n\t\t\tthis.state.currentIndex = this.state.datasetLength - 1;\n\t\t}\n\n\t\t// Render overlays\n\t\tthis.overlayGuides.map(d => {\n\t\t\tlet currentUnit = d.units[this.state.currentIndex];\n\n\t\t\td.overlay = makeOverlay[d.type](currentUnit);\n\t\t\tthis.drawArea.appendChild(d.overlay);\n\t\t});\n\t}\n\n\tupdateOverlayGuides() {\n\t\tif(this.overlayGuides) {\n\t\t\tthis.overlayGuides.forEach(g => {\n\t\t\t\tlet o = g.overlay;\n\t\t\t\to.parentNode.removeChild(o);\n\t\t\t});\n\t\t}\n\t}\n\n\tbindOverlay() {\n\t\tthis.parent.addEventListener('data-select', () => {\n\t\t\tthis.updateOverlay();\n\t\t});\n\t}\n\n\tbindUnits() {\n\t\tthis.dataUnitComponents.map(c => {\n\t\t\tc.units.map(unit => {\n\t\t\t\tunit.addEventListener('click', () => {\n\t\t\t\t\tlet index = unit.getAttribute('data-point-index');\n\t\t\t\t\tthis.setCurrentDataPoint(index);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Note: Doesn't work as tooltip is absolutely positioned\n\t\tthis.tip.container.addEventListener('click', () => {\n\t\t\tlet index = this.tip.container.getAttribute('data-point-index');\n\t\t\tthis.setCurrentDataPoint(index);\n\t\t});\n\t}\n\n\tupdateOverlay() {\n\t\tthis.overlayGuides.map(d => {\n\t\t\tlet currentUnit = d.units[this.state.currentIndex];\n\t\t\tupdateOverlay[d.type](currentUnit, d.overlay);\n\t\t});\n\t}\n\n\tonLeftArrow() {\n\t\tthis.setCurrentDataPoint(this.state.currentIndex - 1);\n\t}\n\n\tonRightArrow() {\n\t\tthis.setCurrentDataPoint(this.state.currentIndex + 1);\n\t}\n\n\tgetDataPoint(index=this.state.currentIndex) {\n\t\tlet s = this.state;\n\t\tlet data_point = {\n\t\t\tindex: index,\n\t\t\tlabel: s.xAxis.labels[index],\n\t\t\tvalues: s.datasets.map(d => d.values[index])\n\t\t};\n\t\treturn data_point;\n\t}\n\n\tsetCurrentDataPoint(index) {\n\t\tlet s = this.state;\n\t\tindex = parseInt(index);\n\t\tif(index < 0) index = 0;\n\t\tif(index >= s.xAxis.labels.length) index = s.xAxis.labels.length - 1;\n\t\tif(index === s.currentIndex) return;\n\t\ts.currentIndex = index;\n\t\tfire(this.parent, \"data-select\", this.getDataPoint());\n\t}\n\n\n\n\t// API\n\taddDataPoint(label, datasetValues, index=this.state.datasetLength) {\n\t\tsuper.addDataPoint(label, datasetValues, index);\n\t\tthis.data.labels.splice(index, 0, label);\n\t\tthis.data.datasets.map((d, i) => {\n\t\t\td.values.splice(index, 0, datasetValues[i]);\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\tremoveDataPoint(index = this.state.datasetLength-1) {\n\t\tif (this.data.labels.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.removeDataPoint(index);\n\t\tthis.data.labels.splice(index, 1);\n\t\tthis.data.datasets.map(d => {\n\t\t\td.values.splice(index, 1);\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\tupdateDataset(datasetValues, index=0) {\n\t\tthis.data.datasets[index].values = datasetValues;\n\t\tthis.update(this.data);\n\t}\n\t// addDataset(dataset, index) {}\n\t// removeDataset(index = 0) {}\n\n\tupdateDatasets(datasets) {\n\t\tthis.data.datasets.map((d, i) => {\n\t\t\tif(datasets[i]) {\n\t\t\t\td.values = datasets[i];\n\t\t\t}\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\t// updateDataPoint(dataPoint, index = 0) {}\n\t// addDataPoint(dataPoint, index = 0) {}\n\t// removeDataPoint(index = 0) {}\n}\n", "import AggregationChart from './AggregationChart';\nimport { getComponent } from '../objects/ChartComponents';\nimport { getOffset } from '../utils/dom';\nimport { getPositionByAngle } from '../utils/helpers';\nimport { makeArcStrokePathStr, makeStrokeCircleStr } from '../utils/draw';\nimport { lightenDarkenColor } from '../utils/colors';\nimport { transform } from '../utils/animation';\nimport { FULL_ANGLE } from '../utils/constants';\n\nexport default class DonutChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'donut';\n\t\tthis.initTimeout = 0;\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\t\tthis.mouseMove = this.mouseMove.bind(this);\n\t\tthis.mouseLeave = this.mouseLeave.bind(this);\n\n\t\tthis.hoverRadio = args.hoverRadio || 0.1;\n\t\tthis.config.startAngle = args.startAngle || 0;\n\n\t\tthis.clockWise = args.clockWise || false;\n\t\tthis.strokeWidth = args.strokeWidth || 30;\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\t\tthis.radius =\n\t\t\tthis.height > this.width\n\t\t\t\t? this.center.x - this.strokeWidth / 2\n\t\t\t\t: this.center.y - this.strokeWidth / 2;\n\n\t\tconst { radius, clockWise } = this;\n\n\t\tconst prevSlicesProperties = s.slicesProperties || [];\n\t\ts.sliceStrings = [];\n\t\ts.slicesProperties = [];\n\t\tlet curAngle = 180 - this.config.startAngle;\n\n\t\ts.sliceTotals.map((total, i) => {\n\t\t\tconst startAngle = curAngle;\n\t\t\tconst originDiffAngle = (total / s.grandTotal) * FULL_ANGLE;\n\t\t\tconst largeArc = originDiffAngle > 180 ? 1: 0;\n\t\t\tconst diffAngle = clockWise ? -originDiffAngle : originDiffAngle;\n\t\t\tconst endAngle = curAngle = curAngle + diffAngle;\n\t\t\tconst startPosition = getPositionByAngle(startAngle, radius);\n\t\t\tconst endPosition = getPositionByAngle(endAngle, radius);\n\n\t\t\tconst prevProperty = this.init && prevSlicesProperties[i];\n\n\t\t\tlet curStart,curEnd;\n\t\t\tif(this.init) {\n\t\t\t\tcurStart = prevProperty ? prevProperty.startPosition : startPosition;\n\t\t\t\tcurEnd = prevProperty ? prevProperty.endPosition : startPosition;\n\t\t\t} else {\n\t\t\t\tcurStart = startPosition;\n\t\t\t\tcurEnd = endPosition;\n\t\t\t}\n\t\t\tconst curPath =\n\t\t\t\toriginDiffAngle === 360\n\t\t\t\t\t? makeStrokeCircleStr(curStart, curEnd, this.center, this.radius, this.clockWise, largeArc)\n\t\t\t\t\t: makeArcStrokePathStr(curStart, curEnd, this.center, this.radius, this.clockWise, largeArc);\n\n\t\t\ts.sliceStrings.push(curPath);\n\t\t\ts.slicesProperties.push({\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition,\n\t\t\t\tvalue: total,\n\t\t\t\ttotal: s.grandTotal,\n\t\t\t\tstartAngle,\n\t\t\t\tendAngle,\n\t\t\t\tangle: diffAngle\n\t\t\t});\n\n\t\t});\n\t\tthis.init = 0;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'donutSlices',\n\t\t\t\t{ },\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsliceStrings: s.sliceStrings,\n\t\t\t\t\t\tcolors: this.colors,\n\t\t\t\t\t\tstrokeWidth: this.strokeWidth,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalTranslateByAngle(property){\n\t\tconst{ radius, hoverRadio } = this;\n\t\tconst position = getPositionByAngle(property.startAngle+(property.angle / 2),radius);\n\t\treturn `translate3d(${(position.x) * hoverRadio}px,${(position.y) * hoverRadio}px,0)`;\n\t}\n\n\thoverSlice(path,i,flag,e){\n\t\tif(!path) return;\n\t\tconst color = this.colors[i];\n\t\tif(flag) {\n\t\t\ttransform(path, this.calTranslateByAngle(this.state.slicesProperties[i]));\n\t\t\tpath.style.stroke = lightenDarkenColor(color, 50);\n\t\t\tlet g_off = getOffset(this.svg);\n\t\t\tlet x = e.pageX - g_off.left + 10;\n\t\t\tlet y = e.pageY - g_off.top - 10;\n\t\t\tlet title = (this.formatted_labels && this.formatted_labels.length > 0\n\t\t\t\t? this.formatted_labels[i] : this.state.labels[i]) + ': ';\n\t\t\tlet percent = (this.state.sliceTotals[i] * 100 / this.state.grandTotal).toFixed(1);\n\t\t\tthis.tip.setValues(x, y, {name: title, value: percent + \"%\"});\n\t\t\tthis.tip.showTip();\n\t\t} else {\n\t\t\ttransform(path,'translate3d(0,0,0)');\n\t\t\tthis.tip.hideTip();\n\t\t\tpath.style.stroke = color;\n\t\t}\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', this.mouseMove);\n\t\tthis.container.addEventListener('mouseleave', this.mouseLeave);\n\t}\n\n\tmouseMove(e){\n\t\tconst target = e.target;\n\t\tlet slices = this.components.get('donutSlices').store;\n\t\tlet prevIndex = this.curActiveSliceIndex;\n\t\tlet prevAcitve = this.curActiveSlice;\n\t\tif(slices.includes(target)) {\n\t\t\tlet i = slices.indexOf(target);\n\t\t\tthis.hoverSlice(prevAcitve, prevIndex,false);\n\t\t\tthis.curActiveSlice = target;\n\t\t\tthis.curActiveSliceIndex = i;\n\t\t\tthis.hoverSlice(target, i, true, e);\n\t\t} else {\n\t\t\tthis.mouseLeave();\n\t\t}\n\t}\n\n\tmouseLeave(){\n\t\tthis.hoverSlice(this.curActiveSlice,this.curActiveSliceIndex,false);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
